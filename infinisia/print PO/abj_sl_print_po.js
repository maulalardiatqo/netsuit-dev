/**
 * @NApiVersion 2.1
 * @NScriptType Suitelet
 */
// This sample shows how to render search results into a PDF file.
define(["N/render", "N/search", "N/record", "N/log", "N/file", "N/http", 'N/config', 'N/format', 'N/email', 'N/runtime'],
    function(render, search, record, log, file, http, config, format, email, runtime) {
        function removeDecimalFormat(number) {
            return number.toString().substring(0, number.toString().length - 3);
        }
        function pembulatan(angka) {
            if (angka >= 0) {
                var bulat = Math.floor(angka);
                var desimal = angka - bulat;
                
                if (desimal >= 0.5) {
                    return Math.ceil(angka);
                } else {
                return Math.floor(angka);
                }
            } else {
                return Math.ceil(angka);
            }
        }
        function onRequest(context) {
            var recid = context.request.parameters.id;
            // load PO
            var poRecord = record.load({
                type: record.Type.PURCHASE_ORDER,
                id: recid,
                isDynamic: false,
            });
            var subsidiari = poRecord.getValue('subsidiary');
            var currenc = poRecord.getValue('currency');
            if(currenc){
                var recCurrenc = record.load({
                    type : 'currency',
                    id : currenc,
                    isDynamic : false
                });
                var tlcCurr = recCurrenc.getValue('symbol');
            }
            // load subsidiarie
            var companyInfo = config.load({
                type: config.Type.COMPANY_INFORMATION
            });
            var legalName = companyInfo.getValue("legalname");
            var logo = companyInfo.getValue('formlogo');
                    var filelogo;
                    var urlLogo = '';
                    if (logo) {
                        filelogo = file.load({
                            id: logo
                        });
                        //get url
                        urlLogo = filelogo.url.replace(/&/g, "&amp;");
                    }
            var addres = companyInfo.getValue("mainaddress_text")
            var retEmailAddres = companyInfo.getValue('email')
            var Npwp = companyInfo.getValue('employerid')
            var vendor_id = poRecord.getValue('entity');
            if(vendor_id){
                var vendorRecord = record.load({
                    type: record.Type.VENDOR,
                    id: vendor_id,
                    isDynamic: false,
                });
                var venName
                var isperson = vendorRecord.getValue('isperson');
                if(isperson == 'T'){
                    var firstname = vendorRecord.getValue('firstname') || ''
                    var middleName = vendorRecord.getValue('middlename') || '';
                    var lastname = vendorRecord.getValue('lastname')|| ''
                    venName = firstname + ' '+ middleName+ ' ' + lastname;
                }else{
                    var isChecklist = vendorRecord.getValue('isautogeneratedrepresentingentity');

                    if(isChecklist === true){
                        venName = vendorRecord.getValue('comments');
                    }else{
                        venName = vendorRecord.getValue('companyname');
                    }
                    
                }
                var venAddres = vendorRecord.getValue('billaddr1');
                if(venAddres === ''){
                    venAddres = vendorRecord.getValue('defaultaddress');
                }
                if(venAddres){
                    if(venAddres.includes('&')){
                        venAddres = venAddres.replace(/&/g, ' dan ')
                    }
                }
                var taxRegNo = vendorRecord.getValue('vatregnumber');
                var count = vendorRecord.getLineCount({
                    sublistId: 'submachine'
                });

            }
            // PO data
            var tandId = poRecord.getValue('tranid');
            var POdate = poRecord.getValue('trandate');
            var terms = poRecord.getText('terms');
            var poTotal = poRecord.getValue('total') || 0;
            
            var total = 0;
            var duedate = poRecord.getValue('duedate');
            var jobNumber = poRecord.getValue('custbody_abj_custom_jobnumber');
            if(jobNumber.includes('\\')){
                jobNumber = jobNumber.replace(/\\/g, '<br/>')
            }
            var subTotal = poRecord.getValue('subtotal') || 0;
            
            var totalWhTaxamount = 0;
            var totalWhTaxamountItem = 0;
            var totalWhTaxamountExp = 0;
            var whtaxammountItem = 0;
            var whtaxammountExp = 0;
            var whTaxCodetoPrint = ''


            var countItem = poRecord.getLineCount({
                sublistId: 'item'
            });
            var taxRateList = [];
            if(countItem > 0){
                var taxpphList = [];
                for (var i = 0; i < countItem; i++) {
                    var taxpph = poRecord.getSublistValue({
                        sublistId: 'item',
                        fieldId: 'custcol_4601_witaxrate',
                        line: i
                    });
                    whtaxammountItem = poRecord.getSublistValue({
                        sublistId: 'item',
                        fieldId: 'custcol_4601_witaxamount',
                        line: i
                    });
                    var amount = poRecord.getSublistValue({
                        sublistId : 'item',
                        fieldId : 'amount',
                        line : i
                    });
                    var qty = poRecord.getSublistValue({
                        sublistId : 'item',
                        fieldId : 'quantity',
                        line : i
                    });
                    var taxtRate = poRecord.getSublistValue({
                        sublistId : 'item',
                        fieldId : 'taxrate1',
                        line : i
                    });
                    
                    if(taxtRate !== 0 && taxRateList.indexOf(taxtRate) === -1){
                        taxRateList.push(parseFloat(taxtRate));
                    }
                    var whTaxCodeI = poRecord.getSublistValue({
                        sublistId : 'item',
                        fieldId : 'custcol_4601_witaxcode',
                        line : i
                    });

                    if(whTaxCodeI){
                        var whRecI = record.load({
                            type: 'customrecord_4601_witaxcode',
                            id: whTaxCodeI,
                            isDynamic: false,
                        });
                        whTaxCodetoPrint = whRecI.getValue('custrecord_4601_wtc_name');
                        if (whTaxCodetoPrint.includes('Prepaid Tax') || whTaxCodetoPrint.includes('Tax Article')) {
                            whTaxCodetoPrint = whTaxCodetoPrint.replace('Prepaid Tax', 'PPH').replace('Tax Article', 'PPH');
                        }
                    }
                    var taxCode = poRecord.getSublistValue({
                        sublistId : 'item',
                        fieldId : 'custcol_4601_witaxcode',
                        line : i
                    })
                    var totalAmountPerline = amount;
                    var tamount = whtaxammountItem
                    whtaxammountItem = Math.abs(tamount);
                    totalWhTaxamountItem += whtaxammountItem
                    
                    if (taxpph && taxpphList.indexOf(taxpph) === -1) {
                        taxpphList.push(taxpph);
                    }
                }
            }
            var countExpense = poRecord.getLineCount({
            sublistId: 'expense'
            });
            if(countExpense > 0){
                var taxpphList = [];
                for (var i = 0; i < countExpense; i++) {
                    var taxpph = poRecord.getSublistValue({
                        sublistId: 'expense',
                        fieldId: 'custcol_4601_witaxrate_exp',
                        line: i
                    });
                    whtaxammountExp = poRecord.getSublistValue({
                        sublistId: 'expense',
                        fieldId: 'custcol_4601_witaxamt_exp',
                        line: i
                    });
                    var amountExp = poRecord.getSublistValue({
                        sublistId: 'expense',
                        fieldId: 'amount',
                        line: i
                    });
                    var whTaxCode = poRecord.getSublistValue({
                        sublistId: 'expense',
                        fieldId: 'custcol_4601_witaxcode_exp',
                        line: i
                    });
                    if(whTaxCode){
                        var whRec = record.load({
                            type: 'customrecord_4601_witaxcode',
                            id: whTaxCode,
                            isDynamic: false,
                        });
                        whTaxCodetoPrint = whRec.getValue('custrecord_4601_wtc_name');
                        if (whTaxCodetoPrint.includes('Prepaid Tax') || whTaxCodetoPrint.includes('Tax Article')) {
                            whTaxCodetoPrint = whTaxCodetoPrint.replace('Prepaid Tax', 'PPH').replace('Tax Article', 'PPH');
                        }
                    }
                    var taxtRate = poRecord.getSublistValue({
                        sublistId: 'expense',
                        fieldId: 'taxrate1',
                        line: i
                    });
                    if(taxtRate != 0 && taxRateList.indexOf(taxtRate) === -1){
                        taxRateList.push(taxtRate);
                    }
                    var qtyExp = poRecord.getSublistValue({
                        sublistId: 'expense',
                        fieldId: 'quantity',
                        line: i
                    });
                    var totalAmountPerlineExp = amountExp;
                    // subTotal += totalAmountPerlineExp
                    var tamountExp = whtaxammountExp
                    whtaxammountExp = Math.abs(tamountExp);
                    totalWhTaxamountExp += whtaxammountExp
                    
                    if (taxpph && taxpphList.indexOf(taxpph) === -1) {
                        taxpphList.push(taxpph);
                    }
                }
            }
            
            if (taxpphList.length > 0) {
                var taxpphToPrint = taxpphList.join(' & ');
            }

            
            var whtaxToCount = whtaxammountItem + whtaxammountExp;
            totalWhTaxamount = totalWhTaxamountItem + totalWhTaxamountExp;
            var totalWHTaxToCount = totalWhTaxamount
            if(totalWhTaxamount){
                totalWhTaxamount = pembulatan(totalWhTaxamount);
                totalWhTaxamount = format.format({
                    value: totalWhTaxamount,
                    type: format.Type.CURRENCY
                });
            }
            var taxtotal = taxtRate / 100 * Number(subTotal);

            total = Number(subTotal) + Number(taxtotal);
            var totalToCount = total
            if(poTotal){
                poTotal = parseFloat(poTotal);
                poTotal = poTotal.toFixed(2);
                poTotal = format.format({
                    value: poTotal,
                    type: format.Type.CURRENCY
                });
            }
            if(subTotal){
                subTotal = pembulatan(subTotal)
                subTotal = format.format({
                    value: subTotal,
                    type: format.Type.CURRENCY
                });
            }
            
            if(taxtotal){
                taxtotal = pembulatan(taxtotal)
                taxtotal = format.format({
                    value: taxtotal,
                    type: format.Type.CURRENCY
                });
            }
            if(total){
                total = pembulatan(total)
                total = format.format({
                    value: total,
                    type: format.Type.CURRENCY
                });
            }
            if(duedate){
                function sysDate() {
                    var date = duedate;
                    var tdate = date.getUTCDate();
                    var month = date.getUTCMonth() + 1; // jan = 0
                    var year = date.getUTCFullYear();
                    
                    return tdate + '/' + month + '/' + year;
                }
                duedate = sysDate();
            }
            if(POdate){
                POdate = format.format({
                    value: POdate,
                    type: format.Type.DATE
                });
            }
            var amountRecieved = Number(totalToCount) - Number(totalWHTaxToCount);
            if(amountRecieved){
                amountRecieved = pembulatan(amountRecieved);
                amountRecieved = format.format({
                    value: amountRecieved,
                    type: format.Type.CURRENCY
                });
            }

            var itemCount = poRecord.getLineCount({
                sublistId: 'item'
            });
            var allDataCharge = []
            if(itemCount > 0){
                var idItemOtherCharge = []
                var otherchargeitemSearchObj = search.create({
                    type: "otherchargeitem",
                    filters:
                    [
                        ["type","anyof","OthCharge"]
                    ],
                    columns:
                    [
                        search.createColumn({name: "internalid", label: "Internal ID"})
                    ]
                });
                var searchResultCount = otherchargeitemSearchObj.runPaged().count;
                otherchargeitemSearchObj.run().each(function(result){
                    var itemOtherChacge = result.getValue({
                        name: "internalid"
                    })
                    if(itemOtherChacge){
                        idItemOtherCharge.push(itemOtherChacge)
                    }
                    return true;
                });
                log.debug('idItemOtherCharge', idItemOtherCharge)
                
                for(var index = 0; index < itemCount; index++){
                    var itemId = poRecord.getSublistValue({
                        sublistId: 'item',
                        fieldId: 'item',
                        line: index
                    });
                    var itemText = poRecord.getSublistText({
                        sublistId: 'item',
                        fieldId: 'item',
                        line: index
                    });
                    var amount = poRecord.getSublistValue({
                        sublistId: 'item',
                        fieldId: 'amount',
                        line: index
                    });
                    log.debug('itemId', itemId)
                    if (idItemOtherCharge.includes(itemId)) {
                        log.debug('Skip itemId', itemId);
                        allDataCharge.push({
                            itemText : itemText,
                            amount : amount
                        })
                    }
                }
                log.debug('allDataCharge', allDataCharge)
            }
            var response = context.response;
            var xml = "";
            var header = "";
            var body = "";
            var headerHeight = '1%';
            var style = "";
            var footer = "";
            var pdfFile = null;

            
            style += "<style type='text/css'>";
            style += ".tg {border-collapse:collapse; border-spacing: 0; width: 100%;}";
            style += ".tg .tg-headerlogo{align:right; border-right: none;border-left: none;border-top: none;border-bottom: none;}";
            style += ".tg .tg-img-logo{width:150px; height:90px; object-vit:cover;}";
            style += ".tg .tg-headerrow{align: right;font-size:12px;}";
            style += ".tg .tg-headerrow_legalName{align: right;font-size:13px;word-break:break-all; font-weight: bold;}";
            style += ".tg .tg-headerrow_Total{align: right;font-size:16px;word-break:break-all; font-weight: bold;}";
            style += ".tg .tg-headerrow_left{align: left;font-size:12px;}";
            style += ".tg .tg-head_body{align: left;font-size:12px;font-weight: bold; border-top: 3px solid black; border-bottom: 3px solid black;}";
            style += ".tg .tg-b_body{align: left;font-size:12px; border-bottom: solid black 2px;}";
            style += ".tg .tg-f_body{align: right;font-size:14px;border-bottom: solid black 2px;}";
            style += ".tg .tg-foot{font-size:11px; color: #808080; position: absolute; bottom: 0;}";
            style += "</style>";


            header += "<table class='tg' width=\"100%\"  style=\"table-layout:fixed;\">";
            header += "<tbody>";
            header += "</tbody>";
            header += "</table>";

            body += "<table class='tg' width=\"100%\"  style=\"table-layout:fixed;\">";
            body += "<tbody>";
            body += "<tr>";
            if (urlLogo) {
                body += "<td class='tg-headerlogo' style='width:50%;vertical-align:center; align:left;'><div style='display: flex; height:150px; width:150px;'><img class='tg-img-logo' src= '" + urlLogo + "' ></img></div></td>";
            }
            body += "<td>";
            
            body +=  "<p class='tg-headerrow_legalName' style='margin-top: 10px; margin-bottom: 10px;'>"  + legalName + "</p>";
            body += "<p class='tg-headerrow' style='margin-top: 1px; margin-bottom: 1px;'>"+ addres + "<br/>";
            body += ""+ retEmailAddres + "<br/>"
            body += "NPWP : "+ Npwp + "</p>" ;
            body +="</td>";
            body += "</tr>";
            body += "<tr style='height:30px;'>";
            body += "</tr>";
            body += "<tr>";
            body += "<td>";
            body += "<p class='tg-headerrow_left'>"+ venName+ "<br/>"
            body += ""+ venAddres + "<br/>"
            body += "NPWP : "+ taxRegNo + "</p>"
            body += "</td>"
            body += "<td>"
            body += "<p class='tg-headerrow_legalName'> Purchase Order # : "+ tandId + "<br/>"
            body += ""+ POdate + "</p>"
            body += "<p class='tg-headerrow' style='font-size:11px'> Terms : "+ terms + "<br/>"
            body += "Due Date :"+duedate+ "</p>"
            body += "</td>"
            body += "</tr>"
            body += "<tr style='height:30px;'>";
            body += "</tr>";
            body += "</tbody>";
            body += "</table>";

            body += "<table class='tg' width=\"100%\" style=\"table-layout:fixed;\">";
            body += "<tbody>";
            body += "<tr>"
            body += "<td class='tg-head_body' style='width:15%'> QTY </td>"
            body += "<td class='tg-head_body' style='width:30%'> DESCRIPTION </td>"
            body += "<td class='tg-head_body' style='align:right; width:18%'> UNIT PRICE ("+ tlcCurr +") </td>"
            body += "<td class='tg-head_body' style='align:right'> TAXED </td>"
            body += "<td class='tg-head_body' style='align:right; width:23%'> AMOUNT ("+ tlcCurr +") </td>"
            body += "</tr>"
            body += getPOItem(context, poRecord);
            body += getPOExpense(context, poRecord);
            body += "<tr>"
            body += "<td class='tg-headerrow_left'></td>"
            body += "<td class='tg-headerrow_left'></td>"
            body += "<td class='tg-f_body' colspan='2'>SUBTOTAL</td>"
            body += "<td class='tg-f_body'>"+removeDecimalFormat(subTotal)+"</td>"
            body += "</tr>"
            if(taxRateList != ''){
                body += "<tr>"
                body += "<td class='tg-headerrow_left'></td>"
                body += "<td class='tg-headerrow_left'></td>"
                body += "<td class='tg-f_body'></td>"
                body += "<td class='tg-f_body'>VAT "+taxtRate+" %</td>"
                body += "<td class='tg-f_body'>"+removeDecimalFormat(taxtotal)+"</td>"
                body += "</tr>"
            }
            if(allDataCharge || allDataCharge.length > 0){
                allDataCharge.forEach(function(charge) {
                    body += "<tr>";
                    body += "<td class='tg-headerrow_left'></td>";
                    body += "<td class='tg-headerrow_left'></td>";
                    body += "<td class='tg-f_body' colspan='2'>" + charge.itemText + "</td>";
                    body += "<td class='tg-f_body'>" + charge.amount + "</td>";
                    body += "</tr>";
                });
            }
            body += "<tr>"
            body += "<td class='tg-headerrow_left'></td>"
            body += "<td class='tg-headerrow_left'></td>"
            body += "<td class='tg-f_body'></td>"
            body += "<td class='tg-f_body'>TOTAL</td>"
            body += "<td class='tg-f_body'>"+removeDecimalFormat(total)+"</td>"
            body += "</tr>"
            
           
            if(whTaxCodetoPrint){
                body += "<tr>"
                body += "<td class='tg-headerrow_left'></td>"
                body += "<td class='tg-headerrow_left'></td>"
                body += "<td style='align: right;font-size:12px;border-bottom: solid black 2px;' colspan='2'>"+ whTaxCodetoPrint+"</td>"
                body += "<td class='tg-f_body'>"+removeDecimalFormat(totalWhTaxamount)+"</td>"
                body += "</tr>"
            }
           
            body += "<tr>"
            body += "<td class='tg-headerrow_left'></td>"
            body += "<td class='tg-headerrow_left'></td>"
            body += "<td style='align: right;font-size:14px;border-top: solid black 2px; font-weight: bold;' colspan='2'>BALANCE DUE</td>"
            body += "<td style='align: right;font-size:15px;border-top: solid black 2px; font-weight: bold;'>"+removeDecimalFormat(amountRecieved)+"</td>"
            body += "</tr>"
            body += "<tr style='height:30px;'></tr>"
            body += "<tr>"
            body += "<td style='align:left; font-size:14px; font-weight: bold;' colspan='5'>"+jobNumber+"</td>"
            body += "</tr>"
            body += "</tbody>";
            body += "</table>";

            footer += "<table class='tg' style='table-layout: fixed;'>";
            footer += "<tbody>";
            footer += "<tr class='tg-foot'>";
            footer += "<td style='align:left'>Purchase Order # "+tandId+"</td>"
            footer += "<td style='align:right'></td>"
            footer += "</tr>";
            footer += "</tbody>";
            footer += "</table>";

            var xml = '<?xml version="1.0"?>\n<!DOCTYPE pdf PUBLIC "-//big.faceless.org//report" "report-1.1.dtd">';
            xml += "<pdf>";
            xml += "<head>";
            xml += style;
            xml += "<macrolist>";
            xml += "<macro id=\"nlheader\">";
            xml += header;
            xml += "</macro>";
            xml += "<macro id=\"nlfooter\">";
            xml += footer;
            xml += "</macro>";
            xml += "</macrolist>";
            xml += "</head>"
            xml += "<body font-size='10' style='font-family: Tahoma,sans-serif;height: 29.7cm; width: 21cm;' header='nlheader' header-height='" + headerHeight + "' footer='nlfooter' footer-height='3%'>";
            xml += body;
            xml += "\n</body>\n</pdf>";

            xml = xml.replace(/ & /g, ' &amp; ');
            response.renderPdf({
                xmlString: xml
            });
        }

        function getPOItem(context, poRecord){
            var itemCount = poRecord.getLineCount({
                sublistId: 'item'
            });
        
            if(itemCount > 0){
                var idItemOtherCharge = []
                var otherchargeitemSearchObj = search.create({
                    type: "otherchargeitem",
                    filters:
                    [
                        ["type","anyof","OthCharge"]
                    ],
                    columns:
                    [
                        search.createColumn({name: "internalid", label: "Internal ID"})
                    ]
                });
                var searchResultCount = otherchargeitemSearchObj.runPaged().count;
                otherchargeitemSearchObj.run().each(function(result){
                    var itemOtherChacge = result.getValue({
                        name: "internalid"
                    })
                    if(itemOtherChacge){
                        idItemOtherCharge.push(itemOtherChacge)
                    }
                    return true;
                });
                log.debug('idItemOtherCharge', idItemOtherCharge)
                var body = "";
                var items = {};
                for(var index = 0; index < itemCount; index++){
                    var itemId = poRecord.getSublistValue({
                        sublistId: 'item',
                        fieldId: 'item',
                        line: index
                    });
                    log.debug('itemId', itemId)
                    if (idItemOtherCharge.includes(itemId)) {
                        log.debug('Skip itemId', itemId);
                    }else{
                        var qty = poRecord.getSublistValue({
                            sublistId: 'item',
                            fieldId: 'quantity',
                            line: index
                        });
                        var description = poRecord.getSublistValue({
                            sublistId: 'item',
                            fieldId: 'description',
                            line: index
                        });
                        var unit = poRecord.getSublistValue({
                            sublistId: 'item',
                            fieldId: 'units',
                            line: index
                        });
                        var amount = poRecord.getSublistValue({
                            sublistId: 'item',
                            fieldId: 'amount',
                            line: index
                        });
            
                        if(!items[itemId]){
                            items[itemId] = {
                                description: description,
                                unit: unit,
                                qty: 0,
                                amount: 0
                            };
                        }
            
                        items[itemId].qty += Number(qty);
                        items[itemId].amount += Number(amount);
                    }
                    
                }
        
                // Format the accumulated data into the body
                for(var itemId in items){
                    var item = items[itemId];
        
                    if(item.description.includes('\\')){
                        item.description = item.description.replace(/\\/g, '<br/>');
                    }
        
                    var rate = item.amount / item.qty;
                    rate = pembulatan(rate);
                    rate = format.format({
                        value: rate,
                        type: format.Type.CURRENCY
                    });
        
                    var amountFormatted = pembulatan(item.amount);
                    amountFormatted = format.format({
                        value: amountFormatted,
                        type: format.Type.CURRENCY
                    });
        
                    body += "<tr>";
                    body += "<td class='tg-b_body'>"+item.qty+" - "+item.unit+ "</td>";
                    body += "<td class='tg-b_body'>"+item.description+"</td>";
                    body += "<td class='tg-b_body' style='align:right'>"+removeDecimalFormat(rate)+"</td>";
                    body += "<td class='tg-b_body' style='align:right'> X </td>";
                    body += "<td class='tg-b_body' style='align:right;'>"+removeDecimalFormat(amountFormatted)+"</td>";
                    body += "</tr>";
                }
        
                return body;
            }
        }
        
        function getPOExpense(context, poRecord){
            var expCont = poRecord.getLineCount({
                sublistId : 'expense'
            });
            if(expCont > 0){
                var body = "";
                for(var index = 0; index < expCont; index++){
                    var qty = 1;
                    var description = poRecord.getSublistValue({
                        sublistId: 'expense',
                        fieldId: 'memo',
                        line: index
                    });
                    if(description.includes('\\')){
                        description = description.replace(/\\/g, '<br/>');
                    }
                    var amount = poRecord.getSublistValue({
                        sublistId: 'expense',
                        fieldId: 'amount',
                        line: index
                    });
                    if(amount){
                        var amountBef = amount
                        
                        amount = pembulatan(amount)
                        amount = format.format({
                            value: amount,
                            type: format.Type.CURRENCY
                        });
                    }
                    var taxamt_exp = poRecord.getSublistValue({
                        sublistId: 'expense',
                        fieldId: 'tax1amt',
                        line: index
                    });
                    if(taxamt_exp){
                        taxamt_exp = pembulatan(taxamt_exp)
                        taxamt_exp = format.format({
                            value: taxamt_exp,
                            type: format.Type.CURRENCY
                        });
                    }
                    var grosamt_exp = Number(amountBef) * Number(qty)
                    if(grosamt_exp){
                        grosamt_exp = pembulatan(grosamt_exp)
                        grosamt_exp = format.format({
                            value: grosamt_exp,
                            type: format.Type.CURRENCY
                        });
                    }
                    body += "<tr>";
                    body += "<td class='tg-b_body'>"+qty+"</td>";
                    body += "<td class='tg-b_body'>"+description+"</td>";
                    body += "<td class='tg-b_body' style='align:right'>"+removeDecimalFormat(amount)+"</td>";
                    body += "<td class='tg-b_body' style='align:right'>X</td>";
                    body += "<td class='tg-b_body' style='align:right;'>"+removeDecimalFormat(grosamt_exp)+"</td>";
                    body += "</tr>";
                }
                return body;
            }
            
        }
    return {
        onRequest: onRequest,
    };
});