/**
 * @NApiVersion 2.1
 * @NScriptType Suitelet
 */
// This sample shows how to render search results into a PDF file.
define(["N/render", "N/search", "N/record", "N/log", "N/file", "N/http", "N/config", "N/format", "N/email", "N/runtime"], function (render, search, record, log, file, http, config, format, email, runtime) {
  function decimalRemove(number) {
    if (number != 0) {
      return number.substring(0, number.length - 3);
    } else {
      return "0.00";
    }
  }

  function onRequest(context) {
    var recid = context.request.parameters.id;
    // log.debug("recid", recid);
    // log.debug("masuk");
    // load SO
    var soRecord = record.load({
      type: "salesorder",
      id: recid,
      isDynamic: false,
    });
    var subsidiari = soRecord.getValue("subsidiary");
    // load subsidiarie
    if (subsidiari) {
      var subsidiariRec = record.load({
        type: "subsidiary",
        id: subsidiari,
        isDynamic: false,
      });
      // load for header
      var legalName = subsidiariRec.getValue("legalname");
      var addresSubsidiaries = subsidiariRec.getValue("mainaddress_text");
      var name = subsidiariRec.getValue("name");
      var retEmailAddres = subsidiariRec.getValue("email");
      var Npwp = subsidiariRec.getValue("federalidnumber");

      var bankName = subsidiariRec.getValue("custrecord_fcn_sub_bank_name");
      var swiftCode = subsidiariRec.getValue("custrecord_fcn_sub_swift_code");
      var bankBranch = subsidiariRec.getValue("custrecord_fcn_sub_bank_branch");
      var accountNo = subsidiariRec.getValue("custrecord_fcn_sub_account_number");
      var paymentReferences = subsidiariRec.getValue("custrecord_fcn_sub_payment_reference");
      var logo = subsidiariRec.getValue("logo");
      var filelogo;
      var urlLogo = "";
      if (logo) {
        filelogo = file.load({
          id: logo,
        });
        //get url
        urlLogo = filelogo.url.replace(/&/g, "&amp;");
      }
    }
    if (addresSubsidiaries.includes("<br />")) {
      addresSubsidiaries = addresSubsidiaries.replace(/<br \/>/g, "");
    }
    if (name) {
      addresSubsidiaries = addresSubsidiaries.replace(name, "");
    }
    // load vendor
    var customer_id = soRecord.getValue("entity");
    if (customer_id) {
      var customerRecord = record.load({
        type: "customer",
        id: customer_id,
        isDynamic: false,
      });
      var isperson = customerRecord.getValue("isperson");
      var custName = "";
      if (isperson == "T") {
        var firstname = customerRecord.getValue("firstname") || "";
        var middleName = customerRecord.getValue("middlename") || "";
        var lastname = customerRecord.getValue("lastname") || "";
        custName = firstname + " " + middleName + " " + lastname;
        // log.debug("custname", custName);
      } else {
        var check = customerRecord.getValue("isautogeneratedrepresentingentity");
        // log.debug("check", check);

        if (check === true) {
          custName = customerRecord.getValue("comments");
        } else {
          custName = customerRecord.getValue("companyname");
        }
      }

      var custAddres = customerRecord.getValue("defaultaddress");
      var custAddres = custAddres.replace(new RegExp("\r?\n", "g"), "<br />");
      var custAddres = custAddres.substring(custAddres.indexOf("<br />") + 6);
      var custEmail = customerRecord.getValue("email");
      var taxRegNo = customerRecord.getValue("vatregnumber");

      // var spaceCust = custName.indexOf(" ");
      // var custName= custName.substring(spaceCust + 1);

      var count = customerRecord.getLineCount({
        sublistId: "submachine",
      });
      for (var i = 0; i < count; i++) {
        var subsidiary = customerRecord.getSublistValue({
          sublistId: "submachine",
          fieldId: "subsidiary",
          line: i,
        });

        if (subsidiary == subsidiari) {
          var balance = customerRecord.getSublistValue({
            sublistId: "submachine",
            fieldId: "balance",
            line: i,
          });
          break;
        }
      }
    }
    // log.debug("balancebfr", balance);
    if (balance) {
      balance = format.format({
        value: balance,
        type: format.Type.CURRENCY,
      });
    }
    // log.debug("balance", balance);
    // PO data
    var tandId = soRecord.getValue("tranid");
    var InvDate = soRecord.getValue("trandate");
    var terms = soRecord.getText("terms");
    var subTotal = soRecord.getValue("subtotal") || 0;
    var poTotal = soRecord.getValue("total") || 0;
    var taxtotal = soRecord.getValue("taxtotal") || 0;
    var total = soRecord.getValue("total") || 0;
    var duedate = soRecord.getValue("duedate") || 0;
    var discount = soRecord.getValue("discounttotal");
    var jobNumber = soRecord.getValue("custbody_abj_custom_jobnumber");
    if (jobNumber.includes("\\")) {
      jobNumber = jobNumber.replace(/\\/g, "<br/>");
    }
    var otehrRefNum = soRecord.getValue("otherrefnum");
    var currency = soRecord.getText("currency");
    var currencyVal = soRecord.getValue("currency");
    currency = currencyVal == 1 ? "IDR" : currency;
    // log.debug("jobNumber", jobNumber);
    var subtotalB = subTotal;
    var totalB = total;
    var taxtotalB = taxtotal;
    var totalToCount = total;
    var totalWhTaxamount = 0;
    var totalWhTaxamountItem = 0;
    var whtaxammountItem = 0;
    var whTaxCodetoPrint = "";

    var countItem = soRecord.getLineCount({
      sublistId: "item",
    });
    if (countItem > 0) {
      var taxpphList = [];
      for (var i = 0; i < countItem; i++) {
        var taxpph = soRecord.getSublistValue({
          sublistId: "item",
          fieldId: "custcol_4601_witaxrate",
          line: i,
        });
        whtaxammountItem = soRecord.getSublistValue({
          sublistId: "item",
          fieldId: "custcol_4601_witaxamount",
          line: i,
        });
        var taxItem = soRecord.getSublistValue({
          sublistId: "item",
          fieldId: "taxrate1",
          line: i,
        });
        var whTaxCodeI = soRecord.getSublistValue({
          sublistId: "item",
          fieldId: "custcol_4601_witaxcode",
          line: i,
        });

        if (whTaxCodeI) {
          var whRecI = record.load({
            type: "customrecord_4601_witaxcode",
            id: whTaxCodeI,
            isDynamic: false,
          });
          whTaxCodetoPrint = whRecI.getValue("custrecord_4601_wtc_name");
          if (whTaxCodetoPrint.includes("Prepaid Tax") || whTaxCodetoPrint.includes("Tax Article")) {
            whTaxCodetoPrint = whTaxCodetoPrint.replace("Prepaid Tax", "PPH").replace("Tax Article", "PPH");
          }
          // log.debug("whtaxcodPrint", whTaxCodetoPrint);
        }

        var tamount = whtaxammountItem;
        whtaxammountItem = Math.abs(tamount);
        totalWhTaxamountItem += whtaxammountItem;

        if (taxpph && taxpphList.indexOf(taxpph) === -1) {
          taxpphList.push(taxpph);
        }
      }
    }
    if (taxpphList.length > 0) {
      var taxpphToPrint = taxpphList.join(" & ");
      // log.debug("taxpphToPrint", taxpphToPrint);
    }
    var whtaxToCount = whtaxammountItem;
    totalWhTaxamount = totalWhTaxamountItem;

    if (totalWhTaxamount) {
      Math.round(totalWhTaxamount);
      totalWhTaxamount = format.format({
        value: totalWhTaxamount,
        type: format.Type.CURRENCY,
      });
    }
    if (poTotal) {
      poTotal = format.format({
        value: poTotal,
        type: format.Type.CURRENCY,
      });
    }
    if (subTotal) {
      Math.round(subTotal);
      subTotal = format.format({
        value: subTotal,
        type: format.Type.CURRENCY,
      });
    }

    if (taxtotal) {
      Math.round(taxtotal);
      taxtotal = format.format({
        value: taxtotal,
        type: format.Type.CURRENCY,
      });
    }
    if (total) {
      Math.round(total);
      total = format.format({
        value: total,
        type: format.Type.CURRENCY,
      });
    }

    if (duedate) {
      function sysDate() {
        var date = duedate;
        var tdate = date.getUTCDate();
        var month = date.getUTCMonth() + 1; // jan = 0
        var year = date.getUTCFullYear();
        return tdate + "/" + month + "/" + year;
      }
      duedate = sysDate();
    }
    if (InvDate) {
      InvDate = format.format({
        value: InvDate,
        type: format.Type.DATE,
      });
    }
    var amountRecieved = Number(subtotalB) - Number(discount) + Number(taxtotalB) / Number(totalB);
    log.debug("subtotal", subtotalB);
    log.debug("discount", discount);
    log.debug("total", totalB);
    log.debug("taxtotal", taxtotalB);
    log.debug("taxtotal_2", taxtotal);

    if (taxpphToPrint) {
      amountRecieved = amountRecieved - totalWhTaxamount;
    }
    if (amountRecieved) {
      Math.round(amountRecieved);
      amountRecieved = format.format({
        value: amountRecieved,
        type: format.Type.CURRENCY,
      });
    }
    log.debug("amountR", amountRecieved);
    if (discount) {
      Math.round(discount);
      discount = format.format({
        value: discount,
        type: format.Type.CURRENCY,
      });
    }

    var response = context.response;
    var xml = "";
    var header = "";
    var body = "";
    var headerHeight = "27%";
    var style = "";
    var footer = "";
    var pdfFile = null;

    style += "<style type='text/css'>";
    style += ".tg {border-collapse:collapse; border-spacing: 0; width: 100%;}";
    style += ".tg .tg-headerlogo{align:right; border-right: none;border-left: none;border-top: none;border-bottom: none;}";
    if (subsidiari == 1) {
      style += ".tg .tg-img-logo{width:150px; height:111px; object-vit:cover;}";
    } else {
      style += ".tg .tg-img-logo{width:195px; height:90px; object-vit:cover;}";
    }
    style += ".tg .tg-headerrow{align: right;font-size:12px;}";
    style += ".tg .tg-headerrow_legalName{align: right;font-size:13px;word-break:break-all; font-weight: bold;}";
    style += ".tg .tg-headerrow_Total{align: right;font-size:16px;word-break:break-all; font-weight: bold;}";
    style += ".tg .tg-headerrow_left{align: left;font-size:12px;}";
    style += ".tg .tg-head_body{align: left;font-size:12px;font-weight: bold; border-top: 3px solid black; border-bottom: 3px solid black;}";
    style += ".tg .tg-b_body{font-size:12px; border-bottom: solid black 2px; overflow: hidden;}";
    style += ".tg .tg-f_body{align: right;font-size:14px;border-bottom: solid black 2px;}";
    style += ".tg .tg-foot{font-size:11px; color: #808080; position: absolute; bottom: 0;}";
    style += "</style>";

    body += "<table class='tg' style=\"table-layout:fixed;\">";
    body += "<tbody>";
    body += "<tr>";
    if (urlLogo) {
      body += "<td class='tg-headerlogo' style='width:50%;vertical-align:center; align:left;'><div style='display: flex; height:150px; width:150px;'><img class='tg-img-logo' src= '" + urlLogo + "' ></img></div></td>";
    }
    body += "<td>";
    body += "<p class='tg-headerrow_legalName' style='margin-top: 10px; margin-bottom: 10px;'>" + legalName + "</p>";
    body += "<p class='tg-headerrow' style='margin-top: 1px; margin-bottom: 1px;'>" + addresSubsidiaries + "<br/>";
    body += "" + retEmailAddres + "<br/>";
    body += "NPWP : " + Npwp + "</p>";
    body += "</td>";
    body += "</tr>";
    body += "<tr style='height:10px;'>";
    body += "</tr>";
    body += "<tr>";
    body += "<td>";
    body += "<p class='tg-headerrow_left'>" + custName + "<br/>";
    body += "<span>" + custAddres + "</span><br/>";
    body += "<span>" + custEmail + "</span><br/>";
    body += "NPWP : " + taxRegNo + "</p>";
    body += "</td>";
    body += "<td>";
    body += "<p class='tg-headerrow_legalName'> Sales Quotation # : " + tandId + "<br/>";
    body += "" + InvDate + "</p>";
    body += "<p class='tg-headerrow' style='font-size:11px'> Terms : " + terms + "<br/>";
    body += "Due Date :" + duedate + "</p>";
    body += "</td>";
    body += "</tr>";
    body += "<tr style='height:10px;'>";
    body += "</tr>";
    body += "</tbody>";
    body += "</table>";

    body += "<table class='tg' style=\"table-layout:fixed;\">";
    body += "<thead>";
    body += "<tr>";
    body += "<td class='tg-head_body' style='width:10%'> QTY </td>";
    body += "<td class='tg-head_body' style='width:30%'> DESCRIPTION </td>";
    body += "<td class='tg-head_body' style='align:right' width='20%'> UNIT PRICE (" + currency + ") </td>";
    body += "<td class='tg-head_body' style='align:right' width='20%'> TAXED </td>";
    body += "<td class='tg-head_body' style='align:right' width='20%'> AMOUNT (" + currency + ") </td>";
    body += "</tr>";
    body += "</thead>";
    body += "<tbody>";
    body += getPOItem(context, soRecord);
    body += "<tr>";
    body += "<td class='tg-headerrow_left'></td>";
    body += "<td class='tg-headerrow_left'></td>";
    body += "<td class='tg-f_body' colspan='2'>SUBTOTAL</td>";
    body += "<td class='tg-f_body'>" + decimalRemove(subTotal) + "</td>";
    body += "</tr>";
    if (discount !== 0) {
      body += "<tr>";
      body += "<td class='tg-headerrow_left'></td>";
      body += "<td class='tg-headerrow_left'></td>";
      body += "<td class='tg-f_body'></td>";
      body += "<td class='tg-f_body'>Discount " + taxItem + " %</td>";
      body += "<td class='tg-f_body'>" + decimalRemove(discount) + "</td>";
      body += "</tr>";
    }

    body += "<tr>";
    body += "<td class='tg-headerrow_left'></td>";
    body += "<td class='tg-headerrow_left'></td>";
    body += "<td class='tg-f_body'></td>";
    body += "<td class='tg-f_body'>PPN " + taxItem + " %</td>";
    body += "<td class='tg-f_body'>" + decimalRemove(taxtotal) + "</td>";
    body += "</tr>";
    body += "<tr>";
    body += "<td class='tg-headerrow_left'></td>";
    body += "<td class='tg-headerrow_left'></td>";
    body += "<td class='tg-f_body'></td>";
    body += "<td class='tg-f_body'>TOTAL</td>";
    body += "<td class='tg-f_body'>" + decimalRemove(total) + "</td>";
    body += "</tr>";
    if (whTaxCodetoPrint) {
      body += "<tr>";
      body += "<td class='tg-headerrow_left'></td>";
      body += "<td class='tg-headerrow_left'></td>";
      body += "<td style='align: right;font-size:12px;border-bottom: solid black 2px;' colspan='2'>" + whTaxCodetoPrint + "</td>";
      body += "<td class='tg-f_body'>" + decimalRemove(totalWhTaxamount) + "</td>";
      body += "</tr>";
    }

    //   body += "<tr>"
    //   body += "<td class='tg-headerrow_left'></td>"
    //   body += "<td class='tg-headerrow_left'></td>"
    //   body += "<td style='align: right;font-size:14px;border-top: solid black 2px; font-weight: bold;' colspan='2'>BALANCE DUE</td>"
    //   body += "<td style='align: right;font-size:14px;border-top: solid black 2px; font-weight: bold;'>" + decimalRemove(amountRecieved) + "</td>"
    //   body += "</tr>"
    body += "</tbody>";
    body += "</table>";
    body += "<table class='tg' width=\"100%\">";
    body += "<tr style='height:30px;'></tr>";
    body += "<tr>";
    body += "<td style='align:left; font-weight: bold;'>Payment Detail</td>";
    body += "<td width='10'></td>";
    body += "<td></td>";
    body += "<td style='align:left; font-weight: bold;' colspan='2'>Other Information</td>";
    body += "<td></td>";
    body += "</tr>";
    body += "<tr>";
    body += "<td style='align:left;'>Bank Name</td>";
    body += "<td width='10'>:</td>";
    body += "<td style='align:left;'>" + bankName + "</td>";
    body += "<td style='align:left;' colspan='2'>Customer References :</td>";
    body += "<td style='align:left;'>" + otehrRefNum + "</td>";
    body += "</tr>";
    body += "<tr>";
    body += "<td style='align:left;'>Bank Branch</td>";
    body += "<td width='10'>:</td>";
    body += "<td style='align:left;'>" + bankBranch + "</td>";
    body += "</tr>";
    body += "<tr>";
    body += "<td style='align:left;'>Bank/Swift Code</td>";
    body += "<td width='10'>:</td>";
    body += "<td style='align:left;'>" + swiftCode + "</td>";
    body += "</tr>";
    body += "<tr>";
    body += "<td style='align:left;'>Acount Name</td>";
    body += "<td width='10'>:</td>";
    body += "<td style='align:left;' colspan='2'>" + legalName + "</td>";
    body += "</tr>";
    body += "<tr>";
    body += "<td style='align:left;'>Acount Number</td>";
    body += "<td width='10'>:</td>";
    body += "<td style='align:left;' colspan='2'>" + accountNo + "</td>";
    body += "</tr>";
    body += "<tr>";
    body += "<td style='align:left;'>Payment References</td>";
    body += "<td width='10'>:</td>";
    body += "<td style='align:left;' colspan='2'>" + tandId + "</td>";
    body += "</tr>";
    body += "<tr style='height:30px;'></tr>";
    body += "<tr>";
    body += "<td style='align:left; font-size:14px; font-weight: bold;' colspan='5'>" + jobNumber + "</td>";
    body += "</tr>";
    body += "</table>";

    // footer += "<table class='tg' style='table-layout: fixed;'>";
    // footer += "<tbody>";
    // footer += "<tr class='tg-foot'>";
    // footer += "<td style='align:left'>Sales Quotation # " + tandId + "</td>"
    // footer += "<td style='align:right'></td>"
    // footer += "</tr>";
    // footer += "</tbody>";
    // footer += "</table>";

    var xml = '<?xml version="1.0"?>\n<!DOCTYPE pdf PUBLIC "-//big.faceless.org//report" "report-1.1.dtd">';
    xml += "<pdf>";
    xml += "<head>";
    xml += style;
    xml += "<macrolist>";
    xml += '<macro id="nlheader">';
    xml += header;
    xml += "</macro>";
    xml += '<macro id="nlfooter">';
    xml += footer;
    xml += "</macro>";
    xml += "</macrolist>";
    xml += "</head>";
    xml += "<body font-size='10' style='font-family: Tahoma,sans-serif;height: 29.7cm; width: 21cm;' footer='nlfooter' footer-height='3%'>";
    xml += body;
    xml += "\n</body>\n</pdf>";

    xml = xml.replace(/ & /g, " &amp; ");
    response.renderPdf({
      xmlString: xml,
    });
  }

  function getPOItem(context, soRecord) {
    var itemCount = soRecord.getLineCount({
      sublistId: "item",
    });
    log.debug("itemCount", itemCount);

    if (itemCount > 0) {
      var body = "";
      for (var index = 0; index < itemCount; index++) {
        var qty =
          soRecord.getSublistValue({
            sublistId: "item",
            fieldId: "quantity",
            line: index,
          }) || 0;
        var description = soRecord.getSublistValue({
          sublistId: "item",
          fieldId: "description",
          line: index,
        });
        if (description.includes("\\")) {
          description = description.replace(/\\/g, "<br />");
        }
        if(description.includes('$') && description.includes('$$')){
          log.debug('masuk $')
          description = description.replace(/\$(.*?)\$\$/g, '<b>$1</b>');
      }
      if(description.includes('#') && description.includes('##')){
          log.debug('masuk #')
          description = description.replace(/\#(.*?)\#\#/g, '<i>$1</i>');
      }
      if(description.includes('*') && description.includes('**')){
          log.debug('masuk *')
          description = description.replace(/\*(.*?)\*\*/g, '<u>$1</u>');
      }
        var unit = soRecord.getSublistValue({
          sublistId: "item",
          fieldId: "units",
          line: index,
        });
        var amount =
          soRecord.getSublistValue({
            sublistId: "item",
            fieldId: "amount",
            line: index,
          }) || 0;
        var taxAmt = soRecord.getSublistValue({
          sublistId: "item",
          fieldId: "tax1amt",
          line: index,
        });
        amount = Math.round(amount);
        var amountTotal = parseFloat(qty) * parseFloat(amount);
        amountTotal = Math.ceil(amountTotal);
        if (amount) {
          amount = format.format({
            value: amount,
            type: format.Type.CURRENCY,
          });
        }
        if (amountTotal) {
          amountTotal = format.format({
            value: amountTotal,
            type: format.Type.CURRENCY,
          });
        }
        if (taxAmt) {
          taxAmt = format.format({
            value: taxAmt,
            type: format.Type.CURRENCY,
          });
        }

        // var ammount = soRecord.getSublistValue({
        //   sublistId: 'item',
        //   fieldId: 'grossamt',
        //   line: index
        // });
        // if (ammount) {
        //   ammount = format.format({
        //     value: ammount,
        //     type: format.Type.CURRENCY
        //   });
        // }

        log.debug("amount", amount);
        log.debug("amountTotal", amountTotal);
        body += "<tr>";
        body += "<td class='tg-b_body' style='align:left'>" + qty + " - " + unit + "Pcs</td>";
        body += "<td class='tg-b_body'>" + description + "</td>";
        body += "<td class='tg-b_body' style='align:right'>" + decimalRemove(amount) + "</td>";
        body += "<td class='tg-b_body' style='align:right'>X</td>";
        body += "<td class='tg-b_body' style='align:right;'>" + decimalRemove(amountTotal) + "</td>";
        body += "</tr>";
      }
      return body;
    }
  }
  return {
    onRequest: onRequest,
  };
});
