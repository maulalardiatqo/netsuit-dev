/**
 * @NApiVersion 2.1
 * @NScriptType Suitelet
 */
// This sample shows how to render search results into a PDF file.
define(["N/render", "N/search", "N/record", "N/log", "N/file", "N/http", 'N/config', 'N/format', 'N/email', 'N/runtime'],
    function(render, search, record, log, file, http, config, format, email, runtime) {
        function removeDecimalFormat(number) {
            return number.toString().substring(0, number.toString().length - 3);
        }
        function pembulatan(angka) {
            if (angka >= 0) {
                var bulat = Math.floor(angka);
                var desimal = angka - bulat;
                
                if (desimal >= 0.5) {
                    return Math.ceil(angka);
                } else {
                return Math.floor(angka);
                }
            } else {
                return Math.ceil(angka);
            }
        }
        function onRequest(context) {
            
            var recid = context.request.parameters.id;
            // load PO
            var poRecord = record.load({
                type: 'vendorbill',
                id: recid,
                isDynamic: false,
            });
            
            var currenc = poRecord.getValue('currency');
            if(currenc){
                var recCurrenc = record.load({
                    type : 'currency',
                    id : currenc,
                    isDynamic : false
                });
                var tlcCurr = recCurrenc.getValue('symbol');
                log.debug('tlcCurr', tlcCurr);
            }
            log.debug('currency', currenc);
            var subsidiari = poRecord.getValue('subsidiary');
            // load subsidiarie
            if(subsidiari){
                var subsidiariRec = record.load({
                    type: "subsidiary",
                    id: subsidiari,
                    isDynamic: false,
                });
                // load for header
                var legalName = subsidiariRec.getValue('legalname');
                var addresSubsidiaries = subsidiariRec.getValue('mainaddress_text');
                var retEmailAddres = subsidiariRec.getValue('email');
                var Npwp = subsidiariRec.getValue('federalidnumber');
                var logo = subsidiariRec.getValue('logo');
                var filelogo;
                var urlLogo = '';
                if (logo) {
                    filelogo = file.load({
                        id: logo
                    });
                    //get url
                    urlLogo = filelogo.url.replace(/&/g, "&amp;");
                }

                if(addresSubsidiaries.includes("<br>")){
                    addresSubsidiaries = addresSubsidiaries.replace(/<br>/g, "");
                }
            }
            
            // load vendor
            var vendor_id = poRecord.getValue('entity');
            log.debug('vendorid', vendor_id);
            if(vendor_id){
                var vendorRecord = record.load({
                    type: record.Type.VENDOR,
                    id: vendor_id,
                    isDynamic: false,
                });
                var venName
                var isperson = vendorRecord.getValue('isperson');
                log.debug('isperson', isperson)
                if(isperson == 'T'){
                    log.debug('condisimasuk', isperson)
                    var firstname = vendorRecord.getValue('firstname') || ''
                    var middleName = vendorRecord.getValue('middlename') || '';
                    var lastname = vendorRecord.getValue('lastname')|| ''
                    venName = firstname + ' '+ middleName+ ' ' + lastname;
                    log.debug('venName', venName);
                }else{
                    var isChecklist = vendorRecord.getValue('isautogeneratedrepresentingentity');
                    log.debug('isCheck', isChecklist);

                    if(isChecklist === true){
                        venName = vendorRecord.getValue('comments');
                    }else{
                        venName = vendorRecord.getValue('companyname');
                    }
                    
                }
                var venAddres = vendorRecord.getValue('billaddr1');
                    if(venAddres === ''){
                        venAddres = vendorRecord.getValue('defaultaddress');
                    }
                
                var taxRegNo = vendorRecord.getValue('vatregnumber');
                var count = vendorRecord.getLineCount({
                    sublistId: 'submachine'
                });
                for (var i = 0; i < count; i++) {
                    var subsidiary = vendorRecord.getSublistValue({
                        sublistId: 'submachine',
                        fieldId: 'subsidiary',
                        line: i
                    });
                
                    if (subsidiary == subsidiari) {
                        var balance = vendorRecord.getSublistValue({
                            sublistId: 'submachine',
                            fieldId: 'balance',
                            line: i
                        });
                        break;
                    }
                }
            }
            log.debug('balancebfr', balance)
            if(balance){
                balance = format.format({
                    value: balance,
                    type: format.Type.CURRENCY
                });
            }
            log.debug('balance', balance);
            // PO data

            var tandId = poRecord.getValue('transactionnumber');
            var POdate = poRecord.getValue('trandate');
            var terms = poRecord.getText('terms');
            var poTotal = poRecord.getValue('total') || 0;
            var taxtotal = poRecord.getValue('taxtotal') || 0;
            var total = poRecord.getValue('total') || 0;
            var duedate = poRecord.getValue('duedate');
            var jobNumber = poRecord.getValue('custbody_abj_custom_jobnumber');

            var subTotal = 0;
            var totalToCount = total
            var totalWhTaxamount = 0;
            var totalWhTaxamountItem = 0;
            var totalWhTaxamountExp = 0;
            var whtaxammountItem = 0;
            var whtaxammountExp = 0;
            var whTaxCodetoPrint = ''
            log.debug('countSubtotal', {total:total, taxtotal:taxtotal});
            var countItem = poRecord.getLineCount({
                sublistId: 'item'
            });
            if(countItem > 0){
                
                var taxpphList = [];
                for (var i = 0; i < countItem; i++) {
                    var account = poRecord.getSublistValue({
                        sublistId : 'item',
                        fieldId : 'item',
                        line : i,
                    });
                    var accountRec = record.load({
                        type: "account",
                        id: account,
                        isDynamic: false,
                    });
                    var cekWH = accountRec.getValue('custrecord_coa_wh');
                    log.debug('cekWH', {account:account, cekWH: cekWH});
                    if(cekWH === false){
                        var taxpph = poRecord.getSublistValue({
                            sublistId: 'item',
                            fieldId: 'custcol_4601_witaxrate',
                            line: i
                        });
                        whtaxammountItem = poRecord.getSublistValue({
                            sublistId: 'item',
                            fieldId: 'custcol_4601_witaxamount',
                            line: i
                        });
                        var amount = poRecord.getSublistValue({
                            sublistId : 'item',
                            fieldId : 'amount',
                            line : i
                        });
                        var qty = poRecord.getSublistValue({
                            sublistId : 'item',
                            fieldId : 'quantity',
                            line : i
                        });
                        var taxRate = poRecord.getSublistValue({
                            sublistId : 'item',
                            fieldId : 'taxrate1',
                            line : i
                        });
                        var whTaxCodeI = poRecord.getSublistValue({
                            sublistId : 'item',
                            fieldId : 'custcol_4601_witaxcode',
                            line : i
                        });
    
                        if(whTaxCodeI){
                            var whRecI = record.load({
                                type: 'customrecord_4601_witaxcode',
                                id: whTaxCodeI,
                                isDynamic: false,
                            });
                            whTaxCodetoPrint = whRecI.getValue('custrecord_4601_wtc_name');
                            if (whTaxCodetoPrint.includes('Prepaid Tax') || whTaxCodetoPrint.includes('Tax Article')) {
                                whTaxCodetoPrint = whTaxCodetoPrint.replace('Prepaid Tax', 'PPH').replace('Tax Article', 'PPH');
                            }
                            log.debug('whtaxcodPrint', whTaxCodetoPrint);
                        }
                        var totalAmount = Number(amount) * Number(qty)
                        subTotal += totalAmount
                        var tamount = whtaxammountItem
                        whtaxammountItem = Math.abs(tamount);
                        totalWhTaxamountItem += whtaxammountItem
    
                        if (taxpph && taxpphList.indexOf(taxpph) === -1) {
                            log.debug('masuk kondisi')
                            taxpphList.push(taxpph);
                        }
                    }

                    
                }
            }
            var countExpense = poRecord.getLineCount({
                sublistId: 'expense'
            });
            log.debug('countExpense', countExpense)
            if(countExpense > 0){
                var taxpphList = [];
                for (var i = 0; i < countExpense; i++) {
                    var account = poRecord.getSublistValue({
                        sublistId : 'expense',
                        fieldId : 'account',
                        line : i,
                    });
                    var accountRec = record.load({
                        type: "account",
                        id: account,
                        isDynamic: false,
                    });
                    var cekWH = accountRec.getValue('custrecord_coa_wh');
                    log.debug('cekWH', {account:account, cekWH: cekWH});
                    if(cekWH === false){
                        var taxpph = poRecord.getSublistValue({
                            sublistId: 'expense',
                            fieldId: 'custcol_4601_witaxrate_exp',
                            line: i
                        });
                        whtaxammountExp = poRecord.getSublistValue({
                            sublistId: 'expense',
                            fieldId: 'custcol_4601_witaxamt_exp',
                            line: i
                        });

                        var amountExp =  poRecord.getSublistValue({
                            sublistId: 'expense',
                            fieldId: 'amount',
                            line: i
                        });
                        var taxRate = poRecord.getSublistValue({
                            sublistId : 'expense',
                            fieldId : 'taxrate1',
                            line : i
                        });
                        var whTaxCode = poRecord.getSublistValue({
                            sublistId: 'expense',
                            fieldId: 'custcol_4601_witaxcode_exp',
                            line: i
                        });
                        log.debug('whtaxCode', whTaxCode);
                        if(whTaxCode){
                            var whRec = record.load({
                                type: 'customrecord_4601_witaxcode',
                                id: whTaxCode,
                                isDynamic: false,
                            });
                            whTaxCodetoPrint = whRec.getValue('custrecord_4601_wtc_name');
                            if (whTaxCodetoPrint.includes('Prepaid Tax') || whTaxCodetoPrint.includes('Tax Article')) {
                                whTaxCodetoPrint = whTaxCodetoPrint.replace('Prepaid Tax', 'PPH').replace('Tax Article', 'PPH');
                            }
                            log.debug('whtaxcodPrint', whTaxCodetoPrint);
                        }
                        subTotal += amountExp
                        log.debug('amountExp', amountExp);
                        var tamountExp = whtaxammountExp
                        whtaxammountExp = Math.abs(tamountExp);
                        totalWhTaxamountExp += whtaxammountExp
    
                        if (taxpph && taxpphList.indexOf(taxpph) === -1) {
                            taxpphList.push(taxpph);
                        }
                    }
                    
                }
            }
            if (taxpphList.length > 0) {
                var taxpphToPrint = taxpphList.join(' & ');
                log.debug('taxpphToPrint', taxpphToPrint);
            }
            log.debug('taxpphToPrintOut', taxpphToPrint)
            var whtaxToCount = whtaxammountItem + whtaxammountExp;
            log.debug('totalWhTaxamountItem', totalWhTaxamountItem);
            log.debug('totalWhTaxamountExp', totalWhTaxamountExp)
            totalWhTaxamount = totalWhTaxamountItem + totalWhTaxamountExp;
            var totalWHTaxToCount = totalWhTaxamount
            log.debug('totalWhTaxamount', totalWhTaxamount);
            log.debug('detailCount', {total:total, taxtotal:taxtotal, totalWhTaxamount:totalWhTaxamount });
            log.debug('subtotal', subTotal);

            total = Number(subTotal) + Number(taxtotal)
            log.debug('totalCOunt', total);
            var totalReceived = total

            if(totalWhTaxamount){
                totalWhTaxamount = pembulatan(totalWhTaxamount)
                totalWhTaxamount = format.format({
                    value: totalWhTaxamount,
                    type: format.Type.CURRENCY
                });
            }
            if(poTotal){
                poTotal = format.format({
                    value: poTotal,
                    type: format.Type.CURRENCY
                });
            }
            if(subTotal){
                subTotal = pembulatan(subTotal);
                subTotal = format.format({
                    value: subTotal,
                    type: format.Type.CURRENCY
                });
            }
            
            if(taxtotal){
                taxtotal = pembulatan(taxtotal)
                taxtotal = format.format({
                    value: taxtotal,
                    type: format.Type.CURRENCY
                });
            }
            if(total){
                total = pembulatan(total)
                total = format.format({
                    value: total,
                    type: format.Type.CURRENCY
                });
            }
            
            log.debug('duedate before', duedate);
            if(duedate){
                function sysDate() {
                    var date = duedate;
                    var tdate = date.getUTCDate();
                    var month = date.getUTCMonth() + 1; // jan = 0
                    var year = date.getUTCFullYear();
                    log.debug("tdate month year", tdate + '/' + month + '/' + year);
                    
                    return tdate + '/' + month + '/' + year;
                }
                duedate = sysDate();
            }
            if(POdate){
                POdate = format.format({
                    value: POdate,
                    type: format.Type.DATE
                });
            }
            
            var amountRecieved = Number(totalReceived) - Number(totalWHTaxToCount);
            amountRecieved = pembulatan(amountRecieved)
            log.debug('totalReceived', totalReceived);
            log.debug('totalWHTaxToCount', totalWHTaxToCount);
            log.debug('amountR', amountRecieved);
            if(amountRecieved){
                amountRecieved = format.format({
                    value: amountRecieved,
                    type: format.Type.CURRENCY
                });
            }
            var response = context.response;
            var xml = "";
            var header = "";
            var body = "";
            var headerHeight = '1%';
            var style = "";
            var footer = "";
            var pdfFile = null;

            style += "<style type='text/css'>";
            style += ".tg {border-collapse:collapse; border-spacing: 0; width: 100%;}";
            style += ".tg .tg-headerlogo{align:right; border-right: none;border-left: none;border-top: none;border-bottom: none;}";
            if(subsidiari == 1){
                style += ".tg .tg-img-logo{width:150px; height:111px; object-vit:cover;}";
            }else{
                style += ".tg .tg-img-logo{width:195px; height:90px; object-vit:cover;}";
            }
            style += ".tg .tg-headerrow{align: right;font-size:12px;}";
            style += ".tg .tg-headerrow_legalName{align: right;font-size:13px;word-break:break-all; font-weight: bold;}";
            style += ".tg .tg-headerrow_Total{align: right;font-size:16px;word-break:break-all; font-weight: bold;}";
            style += ".tg .tg-headerrow_left{align: left;font-size:12px;}";
            style += ".tg .tg-head_body{align: left;font-size:12px;font-weight: bold; border-top: 3px solid black; border-bottom: 3px solid black;}";
            style += ".tg .tg-b_body{align: left;font-size:12px; border-bottom: solid black 2px;}";
            style += ".tg .tg-f_body{align: right;font-size:14px;border-bottom: solid black 2px;}";
            style += ".tg .tg-foot{font-size:11px; color: #808080; position: absolute; bottom: 0;}";
            style += "</style>";
            
            header += "<table class='tg' width=\"100%\"  style=\"table-layout:fixed;\">";
            header += "<tbody>";
            header += "</tbody>";
            header += "</table>";
            body += "<table class='tg' width=\"100%\"  style=\"table-layout:fixed;\">";
            body += "<tbody>";
            body += "<tr>";
            if (urlLogo) {
                body += "<td class='tg-headerlogo' style='width:50%;vertical-align:center; align:left;'><div style='display: flex; height:150px; width:150px;'><img class='tg-img-logo' src= '" + urlLogo + "' ></img></div></td>";
            }
            body += "<td>";
            body +=  "<p class='tg-headerrow_legalName' style='margin-top: 10px; margin-bottom: 10px;'>"  + legalName + "</p>";
            body += "<p class='tg-headerrow' style='margin-top: 1px; margin-bottom: 1px;'>"+ addresSubsidiaries + "<br/>";
            body += ""+ retEmailAddres + "<br/>"
            body += "NPWP : "+ Npwp + "</p>" ;
            body +="</td>";
            body += "</tr>";
            body += "<tr style='height:30px;'>";
            body += "</tr>";
            body += "<tr>";
            body += "<td>";
            body += "<p class='tg-headerrow_left'>"+ venName + "<br/>"
            body += ""+venAddres+"<br/>"
            body += "NPWP : "+ taxRegNo + "</p>"
            body += "</td>"
            body += "<td>"
            body += "<p class='tg-headerrow_legalName'> Vendorbill # : "+ tandId + "<br/>"
            body += ""+ POdate + "</p>"
            body += "<p class='tg-headerrow' style='font-size:11px'> Terms : "+ terms + "<br/>"
            body += "Due Date :"+duedate+ "</p>"
            body += "</td>"
            body += "</tr>"
            body += "<tr style='height:30px;'>";
            body += "</tr>";
            body += "</tbody>";
            body += "</table>";

            body += "<table class='tg' width=\"100%\" style=\"table-layout:fixed;\">";
            body += "<tbody>";
            body += "<tr>"
            body += "<td class='tg-head_body' style='width:12%'> QTY </td>"
            body += "<td class='tg-head_body' style='width:35%'> DESCRIPTION </td>"
            body += "<td class='tg-head_body'> UNIT PRICE ("+ tlcCurr+") </td>"
            body += "<td class='tg-head_body' style='align:right'> TAXED </td>"
            body += "<td class='tg-head_body' style='align:right; width:20%;'> AMOUNT ("+ tlcCurr +") </td>"
            body += "</tr>"
            body += getPOItem(context, poRecord);
            body += getPOExpense(context, poRecord);
            body += "<tr>"
            body += "<td class='tg-headerrow_left'></td>"
            body += "<td class='tg-headerrow_left'></td>"
            body += "<td class='tg-f_body' colspan='2'>SUBTOTAL</td>"
            body += "<td class='tg-f_body'>"+removeDecimalFormat(subTotal)+"</td>"
            body += "</tr>"
            if(taxRate != 0){
                body += "<tr>"
                body += "<td class='tg-headerrow_left'></td>"
                body += "<td class='tg-headerrow_left'></td>"
                body += "<td class='tg-f_body'></td>"
                body += "<td class='tg-f_body'>VAT "+ taxRate +" %</td>"
                body += "<td class='tg-f_body'>"+removeDecimalFormat(taxtotal)+"</td>"
                body += "</tr>"
            }
            
            body += "<tr>"
            body += "<td class='tg-headerrow_left'></td>"
            body += "<td class='tg-headerrow_left'></td>"
            body += "<td class='tg-f_body'></td>"
            body += "<td class='tg-f_body'>TOTAL</td>"
            body += "<td class='tg-f_body'>"+removeDecimalFormat(total)+"</td>"
            body += "</tr>"
            if(whTaxCodetoPrint){
                body += "<tr>"
                body += "<td class='tg-headerrow_left'></td>"
                body += "<td class='tg-headerrow_left'></td>"
                body += "<td style='align: right;font-size:12px;border-bottom: solid black 2px;' colspan='2'>"+whTaxCodetoPrint+"</td>"
                body += "<td class='tg-f_body'>"+removeDecimalFormat(totalWhTaxamount)+"</td>"
                body += "</tr>"
            }
            
            body += "<tr>"
            body += "<td class='tg-headerrow_left'></td>"
            body += "<td class='tg-headerrow_left'></td>"
            body += "<td style='align: right;font-size:14px;border-top: solid black 2px; font-weight: bold;' colspan='2'>BALANCE DUE</td>"
            body += "<td style='align: right;font-size:15px;border-top: solid black 2px; font-weight: bold;'>"+removeDecimalFormat(amountRecieved)+"</td>"
            body += "</tr>"
            body += "<tr style='height:30px;'></tr>"
            body += "<tr>"
            body += "<td style='align:left; font-size:14px; font-weight: bold;' colspan='5'>"+jobNumber+"</td>"
            body += "</tr>"
            body += "</tbody>";
            body += "</table>";

            footer += "<table class='tg' style='table-layout: fixed;'>";
            footer += "<tbody>";
            footer += "<tr class='tg-foot'>";
            footer += "<td style='align:left'>Purchase Invoice # "+tandId+"</td>"
            footer += "<td style='align:right'></td>"
            footer += "</tr>";
            footer += "</tbody>";
            footer += "</table>";

            var xml = '<?xml version="1.0"?>\n<!DOCTYPE pdf PUBLIC "-//big.faceless.org//report" "report-1.1.dtd">';
            xml += "<pdf>";
            xml += "<head>";
            xml += style;
            xml += "<macrolist>";
            xml += "<macro id=\"nlheader\">";
            xml += header;
            xml += "</macro>";
            xml += "<macro id=\"nlfooter\">";
            xml += footer;
            xml += "</macro>";
            xml += "</macrolist>";
            xml += "</head>"
            xml += "<body font-size='10' style='font-family: Tahoma,sans-serif;height: 29.7cm; width: 21cm;' header='nlheader' header-height='" + headerHeight + "' footer='nlfooter' footer-height='3%'>";
            xml += body;
            xml += "\n</body>\n</pdf>";

            xml = xml.replace(/ & /g, ' &amp; ');
            response.renderPdf({
                xmlString: xml
            });
        }

        function getPOItem(context, poRecord){
            var itemCount = poRecord.getLineCount({
                sublistId: 'item'
            });
            log.debug('itemCount', itemCount);
            
            if(itemCount > 0){
                var body = "";
                for(var index = 0; index < itemCount; index++){
                     var account = poRecord.getSublistValue({
                        sublistId : 'item',
                        fieldId : 'item',
                        line : index,
                    });
                    var accountRec = record.load({
                        type: "account",
                        id: account,
                        isDynamic: false,
                    });
                    var cekWH = accountRec.getValue('custrecord_coa_wh');
                    log.debug('cekWH', {account:account, cekWH: cekWH});
                    if(cekWH === false){
                        var qty = poRecord.getSublistValue({
                            sublistId: 'item',
                            fieldId: 'quantity',
                            line: index
                        });
                        var description = poRecord.getSublistValue({
                            sublistId: 'item',
                            fieldId: 'description',
                            line: index
                        });
                        var unit = poRecord.getSublistValue({
                            sublistId: 'item',
                            fieldId: 'units',
                            line: index
                        });
                        var rate;
                        var rateBef = poRecord.getSublistValue({
                            sublistId: 'item',
                            fieldId: 'rate',
                            line: index
                        });
                        var ammount = poRecord.getSublistValue({
                            sublistId: 'item',
                            fieldId: 'amount',
                            line: index
                        });
                        if(rateBef){
                            rate = rateBef
                        }else{
                            rate = Number(ammount) / Number(qty)
                        }
                        if(rate){
                            rate = pembulatan(rate)
                            var rateBefore = rate
                            rate = format.format({
                                value: rate,
                                type: format.Type.CURRENCY
                            });
                        }
                        
                        var taxAmt = poRecord.getSublistValue({
                            sublistId: 'item',
                            fieldId: 'tax1amt',
                            line: index
                        });
                        if(taxAmt){
                            taxAmt = pembulatan(taxAmt)
                            taxAmt = format.format({
                                value: taxAmt,
                                type: format.Type.CURRENCY
                            });
                        }
                        
                        if(ammount){
                            ammount = pembulatan(ammount)
                            ammount =  format.format({
                            value : ammount,
                            type: format.Type.CURRENCY
                        });
                        }
                        
                        
                        body += "<tr>";
                        body += "<td class='tg-b_body'>"+qty+" - "+unit+ "Pcs</td>";
                        body += "<td class='tg-b_body'>"+description+"</td>";
                        body += "<td class='tg-b_body' style='align:right'>"+removeDecimalFormat(rate)+"</td>";
                        body += "<td class='tg-b_body' style='align:right'>X</td>";
                        body += "<td class='tg-b_body' style='align:right;'>"+removeDecimalFormat(ammount)+"</td>";
                        body += "</tr>";
                    }
                    
                    }
                    return body;
            }
            
        }
        function getPOExpense(context, poRecord){
            var expCont = poRecord.getLineCount({
                sublistId : 'expense'
            });
            if(expCont > 0){
                var body = "";
                for(var index = 0; index < expCont; index++){
                    var account = poRecord.getSublistValue({
                        sublistId : 'expense',
                        fieldId : 'account',
                        line : index,
                    });
                    var accountRec = record.load({
                        type: "account",
                        id: account,
                        isDynamic: false,
                    });
                    var cekWH = accountRec.getValue('custrecord_coa_wh');
                    log.debug('cekWH', {account:account, cekWH: cekWH});
                    if(cekWH === false){
                        var qty = 1;
                        var description = poRecord.getSublistValue({
                            sublistId: 'expense',
                            fieldId: 'memo',
                            line: index
                        });
                        var amount = poRecord.getSublistValue({
                            sublistId: 'expense',
                            fieldId: 'amount',
                            line: index
                        });
                        var amountBef = amount
                        if(amount){
                            amount = pembulatan(amount)
                            amount = format.format({
                                value: amount,
                                type: format.Type.CURRENCY
                            });
                        }
                        var taxamt_exp = poRecord.getSublistValue({
                            sublistId: 'expense',
                            fieldId: 'tax1amt',
                            line: index
                        });
                        if(taxamt_exp){
                            taxamt_exp = pembulatan(taxamt_exp)
                            taxamt_exp = format.format({
                                value: taxamt_exp,
                                type: format.Type.CURRENCY
                            });
                        }
                        var grosamt_exp = Number(amountBef) * Number(qty)
                        grosamt_exp = pembulatan(grosamt_exp);
                        grosamt_exp = format.format({
                            value : grosamt_exp,
                            type: format.Type.CURRENCY
                        });
                        
                        body += "<tr>";
                        body += "<td class='tg-b_body'>"+qty+"</td>";
                        body += "<td class='tg-b_body'>"+description+"</td>";
                        body += "<td class='tg-b_body' style='align:right'>"+removeDecimalFormat(amount)+"</td>";
                        body += "<td class='tg-b_body' style='align:right'>X</td>";
                        body += "<td class='tg-b_body' style='align:right;'>"+removeDecimalFormat(grosamt_exp)+"</td>";
                        body += "</tr>";
                    }
                    
                }
                return body;
            }
            
        }
    return {
        onRequest: onRequest,
    };
});