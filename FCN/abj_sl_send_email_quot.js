    /**
     * @NApiVersion 2.1
     * @NScriptType Suitelet
     */
    // This sample shows how to render search results into a PDF file.
    define(["N/render", "N/search", "N/record", "N/log", "N/file", "N/http", "N/config", "N/format", "N/email", "N/runtime"], function (render, search, record, log, file, http, config, format, email, runtime) {
        function removeDecimalFormat(number) {
        return number.toString().substring(0, number.toString().length - 3);
        }
        function pembulatan(angka) {
        if (angka >= 0) {
            var bulat = Math.floor(angka);
            var desimal = angka - bulat;
    
            if (desimal >= 0.5) {
            return Math.ceil(angka);
            } else {
            return Math.floor(angka);
            }
        } else {
            return Math.ceil(angka);
        }
        }
    
        function removeDuplicates(array) {
        return array.filter((value, index, self) => {
            return self.indexOf(value) === index;
        });
        }
    
        function numberWithCommas(x) {
        x = x.toString();
        var pattern = /(-?\d+)(\d{3})/;
        while (pattern.test(x)) x = x.replace(pattern, "$1,$2");
        return x;
        }
        function escapeXmlSymbols(input) {
            if (!input || typeof input !== "string") {
                return input;
            }
            return input.replace(/&/g, "&amp;")
                        .replace(/</g, "&lt;")
                        .replace(/>/g, "&gt;")
                        .replace(/"/g, "&quot;")
                        .replace(/'/g, "&apos;");
        }
        function onRequest(context) {
           
        var recid = context.request.parameters.id;
        // load PO
        var dataRec = record.load({
            type: "estimate",
            id: recid,
            isDynamic: false,
        });
    
        var currenc = dataRec.getValue("currency");
        if (currenc) {
            var recCurrenc = record.load({
            type: "currency",
            id: currenc,
            isDynamic: false,
            });
            var tlcCurr = recCurrenc.getValue("symbol");
        }
        var subsidiari = dataRec.getValue("subsidiary");
        var discountTotal = dataRec.getValue("discounttotal");
        var employeeName = dataRec.getText("custbody_fcn_sales_employee");
        // load subsidiarie
        if (subsidiari) {
            var subsidiariRec = record.load({
            type: "subsidiary",
            id: subsidiari,
            isDynamic: false,
            });
            // load for header
            var legalName = escapeXmlSymbols(subsidiariRec.getValue("legalname"));
            var addresSubsidiaries = escapeXmlSymbols(subsidiariRec.getValue("mainaddress_text"));
            var retEmailAddres = subsidiariRec.getValue("email");
            var Npwp = subsidiariRec.getValue("federalidnumber");
            var logo = subsidiariRec.getValue("logo");
            var filelogo;
            var urlLogo = "";
            if (logo) {
            filelogo = file.load({
                id: logo,
            });
            //get url
            urlLogo = filelogo.url.replace(/&/g, "&amp;");
            }
    
            if (addresSubsidiaries.includes("<br>")) {
            addresSubsidiaries = addresSubsidiaries.replace(/<br>/g, "");
            }
        }
    
        // load vendor
        var customerID = dataRec.getValue("entity");
        if (customerID) {
            var custRecord = record.load({
            type: record.Type.CUSTOMER,
            id: customerID,
            isDynamic: false,
            });
            var custName;
            var isperson = custRecord.getValue("isperson");
            if (isperson == "T") {
            var firstname = escapeXmlSymbols(custRecord.getValue("firstname")) || "";
            var middleName = escapeXmlSymbols(custRecord.getValue("middlename")) || "";
            var lastname = escapeXmlSymbols(custRecord.getValue("lastname")) || "";
            custName = firstname + " " + middleName + " " + lastname;
            } else {
            var isChecklist = custRecord.getValue("isautogeneratedrepresentingentity");
            if (isChecklist === true) {
                custName = escapeXmlSymbols(custRecord.getValue("comments"));
            } else {
                custName = escapeXmlSymbols(custRecord.getValue("companyname"));
            }
            }
            var custAddres = escapeXmlSymbols(custRecord.getValue("billaddr1"));
            if (custAddres === "") {
            custAddres = escapeXmlSymbols(custRecord.getValue("defaultaddress"));
            }
    
            var taxRegNo = custRecord.getValue("vatregnumber");
            var custEmail = custRecord.getValue("email");
            var custPhone = custRecord.getValue("phone");
            var count = custRecord.getLineCount({
            sublistId: "submachine",
            });
            for (var i = 0; i < count; i++) {
            var subsidiary = custRecord.getSublistValue({
                sublistId: "submachine",
                fieldId: "subsidiary",
                line: i,
            });
    
            if (subsidiary == subsidiari) {
                var balance = custRecord.getSublistValue({
                sublistId: "submachine",
                fieldId: "balance",
                line: i,
                });
                break;
            }
            }
        }
        if (balance) {
            balance = format.format({
            value: balance,
            type: format.Type.CURRENCY,
            });
        }
        // PO data
        var jobTitle = escapeXmlSymbols(dataRec.getValue("title"));
        var sendDate = dataRec.getText("trandate");
        var tranId = dataRec.getValue("tranid");
        var quoteTotal = dataRec.getValue("total") || 0;
        var taxtotal = dataRec.getValue("taxtotal") || 0;
        var total = dataRec.getValue("total") || 0;
        var termsCondition = dataRec.getValue('custbody_abj_memo_quotation_rate_card');
        var jobNumber = escapeXmlSymbols(dataRec.getValue("custbody_abj_custom_jobnumber"));
        if (jobNumber.includes("\\")) {
            jobNumber = jobNumber.replace(/\\/g, "<br/>");
        }
        var subTotal = 0;
        var totalToCount = total;
        var totalWhTaxamount = 0;
        var totalWhTaxamountItem = 0;
        var totalWhTaxamountExp = 0;
        var whtaxammountItem = 0;
        var whtaxammountExp = 0;
        var whTaxCodetoPrint = "";
        // log.debug('countSubtotal', {total:total, taxtotal:taxtotal});
        var countItem = dataRec.getLineCount({
            sublistId: "item",
        });
        var taxrateList = [];
        if (countItem > 0) {
            for (var i = 0; i < countItem; i++) {
            var account = dataRec.getSublistValue({
                sublistId: "item",
                fieldId: "item",
                line: i,
            });
            if (account) {
                whtaxammountItem = dataRec.getSublistValue({
                sublistId: "item",
                fieldId: "custcol_4601_witaxamount",
                line: i,
                });
                var amount = dataRec.getSublistValue({
                sublistId: "item",
                fieldId: "amount",
                line: i,
                });
                var qty = dataRec.getSublistValue({
                sublistId: "item",
                fieldId: "quantity",
                line: i,
                });
                var taxRate = dataRec.getSublistValue({
                sublistId: "item",
                fieldId: "taxrate1",
                line: i,
                });
                if (taxRate != 0 && taxrateList.indexOf(taxRate) === -1) {
                taxrateList.push(parseFloat(taxRate));
                }
                log.debug("taxRate", taxRate);
                var whTaxCodeI = dataRec.getSublistValue({
                sublistId: "item",
                fieldId: "custcol_4601_witaxcode",
                line: i,
                });
    
                if (whTaxCodeI) {
                var whRecI = record.load({
                    type: "customrecord_4601_witaxcode",
                    id: whTaxCodeI,
                    isDynamic: false,
                });
                whTaxCodetoPrint = whRecI.getValue("custrecord_4601_wtc_name");
                if (whTaxCodetoPrint.includes("Prepaid Tax") || whTaxCodetoPrint.includes("Tax Article")) {
                    whTaxCodetoPrint = whTaxCodetoPrint.replace("Prepaid Tax", "PPH").replace("Tax Article", "PPH");
                }
                }
                // var totalAmount = Number(amount) * Number(qty)
                var totalAmount = amount;
                log.debug("subtotalcount", { "total amount": totalAmount, amount: amount, qty: qty });
                subTotal += totalAmount;
                log.debug("subtotal check", subTotal);
                var tamount = whtaxammountItem;
                whtaxammountItem = Math.abs(tamount);
                totalWhTaxamountItem += whtaxammountItem;
            }
            }
        }
    
        var whtaxToCount = whtaxammountItem + whtaxammountExp;
        totalWhTaxamount = totalWhTaxamountItem + totalWhTaxamountExp;
        var totalWHTaxToCount = totalWhTaxamount;
    
        // total = Number(subTotal) + Number(taxtotal);
        var totalReceived = total;
        var subTotal2 = Number(subTotal) + Number(discountTotal);
        log.debug("subTotal2", subTotal2);
    
        if (totalWhTaxamount) {
            totalWhTaxamount = pembulatan(totalWhTaxamount);
            totalWhTaxamount = format.format({
            value: totalWhTaxamount,
            type: format.Type.CURRENCY,
            });
        }
        if (quoteTotal) {
            quoteTotal = format.format({
            value: quoteTotal,
            type: format.Type.CURRENCY,
            });
        }
        var subtotalBef = subTotal
        if (subTotal) {
            subTotal = pembulatan(subTotal);
            subTotal = format.format({
            value: subTotal,
            type: format.Type.CURRENCY,
            });
        }
    
        if (subTotal2) {
            subTotal2 = pembulatan(subTotal2);
            subTotal2 = format.format({
            value: subTotal2,
            type: format.Type.CURRENCY,
            });
        }
    
        if (taxtotal) {
            taxtotal = pembulatan(taxtotal);
            taxtotal = format.format({
            value: taxtotal,
            type: format.Type.CURRENCY,
            });
        }
        if (total) {
            total = pembulatan(total);
            total = format.format({
            value: total,
            type: format.Type.CURRENCY,
            });
        }
        if (sendDate) {
            sendDate = format.format({
            value: sendDate,
            type: format.Type.DATE,
            });
        }
    
        var amountRecieved = Number(totalReceived) - Number(totalWHTaxToCount);
        amountRecieved = pembulatan(amountRecieved);
        if (amountRecieved) {
            amountRecieved = format.format({
            value: amountRecieved,
            type: format.Type.CURRENCY,
            });
        }
    
        var itemCount = dataRec.getLineCount({
            sublistId: "item",
        });
        var totalDiscount = 0
        var totalCost = 0
        if (itemCount > 0) {
            for (var index = 0; index < itemCount; index++) {
            var discLine = dataRec.getSublistValue({
                sublistId: "item",
                fieldId: "custcol_abj_disc_line",
                line: index,
            }) || 0
            log.debug('discLine atas', discLine)
            totalDiscount += parseFloat(discLine)
            var itemId = dataRec.getSublistValue({
                sublistId: "item",
                fieldId: "item",
                line: index,
            });
            if(itemId != '2880'){
                var itemPrice = dataRec.getSublistValue({
                sublistId: "item",
                fieldId: "amount",
                line: index,
                }) || 0;
                totalCost += parseFloat(itemPrice)
            } 
            
            }
        }
        var contPerson = dataRec.getValue('custbody_abj_cp_name');
        var cpEmail = dataRec.getValue('custbody_abj_cp_email');
        var cpPhone = dataRec.getValue('custbody_abj_cp_phone');
        var discountHeader = dataRec.getValue("discountrate")||0;
        totalDiscount = parseFloat(totalDiscount) + parseFloat(discountHeader)
        log.debug('totalDiscount', totalDiscount);
        var taxTotalRate = (parseFloat(totalCost) - parseFloat(totalDiscount)) * 11 / 100;
    
        var customForm = dataRec.getValue('customform');
        log.debug('customForm', customForm);
    
        var response = context.response;
        var xml = "";
        var header = "";
        var body = "";
        var headerHeight = "1%";
        var style = "";
        var footer = "";
        var pdfFile = null;
        var terms = "";
        var duedate = "";
    
        style += "<style type='text/css'>";
        style += ".tg {border-collapse:collapse; border-spacing: 0; width: 100%;}";
        style += ".tg .tg-headerlogo{align:right; border-right: none;border-left: none;border-top: none;border-bottom: none;}";
        if (subsidiari == 1) {
            style += ".tg .tg-img-logo{width:150px; height:111px; object-vit:cover;}";
        } else {
            style += ".tg .tg-img-logo{width:195px; height:90px; object-vit:cover;}";
        }
        style += ".tg .tg-headerrow{align: right;font-size:10px;}";
        style += ".tg .tg-headerrow_legalName{align: right;font-size:10px;word-break:break-all; font-weight: bold;}";
        style += ".tg .tg-headerrow_legalNameLeft{align: left;font-size:10px;word-break:break-all; font-weight: bold;}";
        style += ".tg .tg-headerrow_quote{align: center;font-size:16px; font-weight: bold;}";
        style += ".tg .tg-headerrow_Total{align: right;font-size:16px;word-break:break-all; font-weight: bold;}";
        style += ".tg .tg-headerrow_left{align: left;font-size:10px;}";
        style += ".tg .tg-headerrow_center{align: center;font-size:10px;}";
        style += ".tg .tg-head_body{align: center;font-size:10px;font-weight: bold; border-top: 1px solid black; border-bottom: 1px solid black; color:#fcfafa}";
        style += ".tg .tg-b_body{align: left;font-size:10px;}";
        style += ".tg .tg-f_body{align: right;font-size:10px;}";
        style += ".tg .tg-foot{font-size:11px; color: #808080; position: absolute; bottom: 0;}";
        style += "</style>";
    
        header += '<table class=\'tg\' width="100%"  style="table-layout:fixed;">';
        header += "<tbody>";
        header += "</tbody>";
        header += "</table>";
        body += '<table class=\'tg\' width="100%"  style="table-layout:fixed;">';
        body += "<tbody>";
        body += "<tr>";
        if (urlLogo) {
            body += "<td class='tg-headerlogo' style='width:70%;vertical-align:center; align:left;'><div style='display: flex; height:50px; width:50px;'><img class='tg-img-logo' src= '" + urlLogo + "' ></img></div></td>";
        }
        body += "<td valign='middle' style='font-weight:bold; align:center; font-size:18px; vertical-align:center;'>QUOTATION</td>"
        body += "</tr>";
    
        // body += "<tr style='height:30px;'>";
        // body += "</tr>";
        body += "</tbody>";
        body += "</table>";
    
        body += '<table class=\'tg\' width="100%" style="table-layout:fixed; font-size:11px;">';
        body += "<tbody>";
        body += "<tr>";
        body += "<td style='width:20%'></td>"
        body += "<td style='width:30%'></td>"
        body += "<td style='width:10%'></td>"
        body += "<td style='width:14%'></td>"
        body += "<td style='width:1%'></td>"
        body += "<td style='width:25%'></td>"
        body += "</tr>";
    
        body += "<tr>";
        body += "<td colspan='2'>"+legalName+"</td>"
        body += "<td></td>"
        body += "<td>DATE</td>"
        body += "<td></td>"
        body += "<td style='align:right'>"+sendDate+"</td>"
        body += "</tr>";
    
        body += "<tr>";
        body += "<td rowspan='2' colspan='2'>"+addresSubsidiaries+"</td>"
        body += "<td></td>"
        body += "<td>JOB TITLE</td>"
        body += "<td></td>"
        body += "<td style='align:right'>"+jobTitle+"</td>"
        body += "</tr>";
    
        body += "<tr>";
        body += "<td></td>"
        body += "<td>JOB NO.</td>"
        body += "<td></td>"
        body += "<td style='align:right'>"+jobNumber+"</td>"
        body += "</tr>";
    
        body += "<tr style='hight:30px;'>";
        body += "<td colspan='5' style='height:30px'></td>"
        body += "</tr>";
    
        body += "<tr>";
        body += "<td>ORDER BY</td>"
        body += "<td>"+custName+"</td>"
        body += "<td></td>"
        body += "<td>QUOTATION NO.</td>"
        body += "<td></td>"
        body += "<td style='align:right'>"+tranId+"</td>"
        body += "</tr>";
    
        body += "<tr>";
        body += "<td>CONTACT PERSON</td>"
        body += "<td>"+contPerson+"</td>"
        body += "</tr>";
    
        body += "<tr>";
        body += "<td>EMAIL</td>"
        body += "<td>"+cpEmail+"</td>"
        body += "</tr>";
    
        body += "<tr>";
        body += "<td>PHONE</td>"
        body += "<td>"+cpPhone+"</td>"
        body += "</tr>";
    
        body += "<tr style='hight:30px;'>";
        body += "<td colspan='5' style='height:30px'></td>"
        body += "</tr>";
    
        body += "</tbody>";
        body += "</table>";
    
    
        body += '<table class=\'tg\' width="100%" style="table-layout:fixed;">';
        body += "<tbody>";
        if(customForm == 143){
            body += "<tr>";
            body += "<td class='tg-head_body' style='border-left: 1px solid black; background-color:#757575' width='5%'> No </td>";
            body += "<td class='tg-head_body' style='border-left: 1px solid black; background-color:#757575' width='30%'> Item </td>";
            body += "<td class='tg-head_body' style='border-left: 1px solid black; background-color:#757575' width='20%'> Complexity Level </td>";
            body += "<td class='tg-head_body' style='border-left: 1px solid black; background-color:#757575' width='21%'> Item Price </td>";
            body += "<td class='tg-head_body' style='border-left: 1px solid black; background-color:#757575' width='5%'> QTY </td>";
            body += "<td class='tg-head_body' style='border-right: 1px solid black; border-left: 1px solid black; background-color:#757575'  width='24%'> Total Costs </td>";
            body += "</tr>";
        }else{
            body += "<tr>";
            body += "<td class='tg-head_body' style='border-left: 1px solid black; background-color:#757575' width='5%'> No </td>";
            body += "<td class='tg-head_body' style='border-left: 1px solid black; background-color:#757575' width='35%'> Item </td>";
            body += "<td class='tg-head_body' style='border-left: 1px solid black; background-color:#757575' width='25%'> Item Price </td>";
            body += "<td class='tg-head_body' style='border-left: 1px solid black; background-color:#757575' width='10%'> QTY </td>";
            body += "<td class='tg-head_body' style='border-right: 1px solid black; border-left: 1px solid black; background-color:#757575'  width='25%'> Total Costs </td>";
            body += "</tr>";
        }
        
        body += getPOItem(context, dataRec, customForm);
        body += "<tr>";
        body += "<td style='border-top: 1px solid black;' colspan='6'></td>";
        body += "</tr>";
    
        body += "<tr style='height:20px;'></tr>";
        body += "</tbody>";
        body += "</table>";
    
        body += '<table class=\'tg\' width="100%" style="table-layout:fixed;">';
        body += "<tbody>";
    
        body += "<tr>";
        body += "<td style='width:55%'></td>"
        body += "<td style='width:5%'></td>"
        body += "<td style='width:20%'></td>"
        body += "<td style='width:20%'></td>"
        body += "</tr>";
    
        body += "<tr>";
        log.debug('termsCondition', termsCondition)
        if (termsCondition.includes("Terms & Conditions:")) {
            termsCondition = termsCondition.replace("Terms & Conditions:", "<strong>Terms & Conditions:</strong><br />");
        }
        if (termsCondition.includes("Payment & Cancellation Terms:")) {
            termsCondition = termsCondition.replace("Payment & Cancellation Terms:", "<br /><strong>Payment & Cancellation Terms:</strong><br />");
        }

        termsCondition = termsCondition.replace(/&/g, "&amp;")
    
        body += "<td rowspan='10'>"+termsCondition+"</td>"
        body += "<td></td>"
        body += "<td style='align:right'>TOTAL COST</td>"
        body += "<td style='align:right'>Rp. "+numberWithCommas(totalCost)+"</td>"
        body += "</tr>";
        log.debug('totalDiscount', totalDiscount)
        if(totalDiscount != 0 || totalDiscount != '0'){
            body += "<tr>";
            body += "<td></td>"
            body += "<td style='align:right'>TOTAL DISCOUNT</td>"
            body += "<td style='align:right'>Rp. ("+numberWithCommas(Math.abs(totalDiscount))+")</td>"
            body += "</tr>";
    
            body += "<tr>";
            body += "<td></td>"
            body += "<td style='align:right'>SUB TOTAL</td>"
            
            // var subtotalcount = parseFloat(totalCost) + parseFloat(totalDiscount)
            // log.debug('subtotalcount', {subtotalcount : subtotalcount, totalCost : totalCost, totalDiscount : totalDiscount})
            body += "<td style='align:right'>Rp. "+removeDecimalFormat(subTotal2)+"</td>"
            body += "</tr>";
        }
        
    
        
    
        body += "<tr>";
        body += "<td></td>"
        body += "<td style='align:right'>VAT 11%</td>"
        body += "<td style='align:right'>Rp. "+removeDecimalFormat(taxtotal)+"</td>"
        // body += "<td style='align:right'>Rp. "+numberWithCommas(taxTotalRate)+"</td>"
        body += "</tr>";
    
        body += "<tr>";
        body += "<td></td>"
        body += "<td style='align:right'>GRAND TOTAL</td>"
        body += "<td style='align:right'>Rp. "+removeDecimalFormat(total)+"</td>"
        body += "</tr>";
    
        body += "<tr>";
        body += "<td colspan='4'></td>"
        body += "</tr>";
        body += "<tr>";
        body += "<td colspan='4'></td>"
        body += "</tr>";
        body += "<tr>";
        body += "<td colspan='4'></td>"
        body += "</tr>";
        body += "<tr>";
        body += "<td colspan='4'></td>"
        body += "</tr>";
        body += "<tr>";
        body += "<td colspan='4' style='height:30px'></td>"
        body += "</tr>";
    
        body += "</tbody>";
        body += "</table>";
        
        body += '<table class=\'tg\' width="100%" style="table-layout:fixed;">';
        body += "<tbody>";
        body += "<tr>";
        body += "<td style='width:50%'></td>"
        body += "<td style='width:50%'></td>"
        body += "</tr>";
    
        body += "<tr>";
        body += "<td>Proposed by,</td>"
        body += "<td>Approved by,</td>"
        body += "</tr>";
    
        body += "<tr>";
        body += "<td colspan='2' style='height:60px;'></td>"
        body += "</tr>";
    
    
        body += "<tr>";
        body += "<td>(____________)</td>"
        body += "<td>(____________)</td>"
        body += "</tr>";
    
        body += "</tbody>";
        body += "</table>";
    
    
        footer += "<table class='tg' style='table-layout: fixed;'>";
        footer += "<tbody>";
        footer += "<tr class='tg-foot'>";
        footer += "<td style='align:left'>Quotation # " + jobNumber + "</td>";
        footer += "<td style='align:right'></td>";
        footer += "</tr>";
        footer += "</tbody>";
        footer += "</table>";
    
        var xml = '<?xml version="1.0"?>\n<!DOCTYPE pdf PUBLIC "-//big.faceless.org//report" "report-1.1.dtd">';
        xml += "<pdf>";
        xml += "<head>";
        xml += style;
        xml += "<macrolist>";
        xml += '<macro id="nlheader">';
        xml += header;
        xml += "</macro>";
        xml += '<macro id="nlfooter">';
        xml += footer;
        xml += "</macro>";
        xml += "</macrolist>";
        xml += "</head>";
        xml += "<body font-size='10' style='font-family: Tahoma,sans-serif;height: 29.7cm; width: 21cm;' header='nlheader' header-height='" + headerHeight + "' footer='nlfooter' footer-height='3%'>";
        xml += body;
        xml += "\n</body>\n</pdf>";
    
        // xml = xml.replace(/&/g, "&amp;");
        var pdfFiletoEmail = render.xmlToPdf({
            xmlString: xml
        });
        var emailReceipt = dataRec.getValue('custbody_abj_email_recipients');
        var emailContent = dataRec.getValue('custbody_abj_email_messages')
        pdfFiletoEmail.name = 'Quot' + tranId + '.pdf';
        var html = '<html> <body><h2>Process Email Quotation Result</h2>';
        var err_msg = '';
        var subJectMail = 'Quotation #' +  tranId
        var currentuser = runtime.getCurrentUser().id;
        log.debug('emailReceipt', emailReceipt)
        try{
            var emailSend = email.send({
                author: currentuser,
                recipients: emailReceipt,
                cc: [],
                subject: subJectMail,
                body: emailContent,
                attachments: [pdfFiletoEmail],
                relatedRecords: {
                transactionId: recid,
                }
            });
            log.debug("send email", emailSend);
            html += '<h3>Succesfully Email Quotation #' + tranId + ' to : ' + emailReceipt + '</h3>';
        }catch(e){
            err_msg = 'Failed to email SO #' + recid + ' ' + e.name + ': ' + e.message + '<br/>';
            log.debug("Error messages", err_msg);
        }
        if (err_msg) {
            html += '<h3>Failed to email Quotation #' + tranId + '</h3>';
            html += '<h3>Error Messages:<br/> ' + err_msg + '</h3>';
        }

        html += '<input type="button" value="OK" onclick="history.back()">';
        html += '</body></html>';
        context.response.write(html);

        log.debug("send email", emailSend);
    }

    function generateTableHTML(sectionID, items, customForm) {
    var fieldLookUpSection = search.lookupFields({
        type: "customlist_abj_rate_card_section",
        id: sectionID,
        columns: ["name"],
    });
    var sectionName = fieldLookUpSection.name;
    let html = `<tr><td colspan="6" class='tg-b_body' style="border-right: 1px solid black; border-left: 1px solid black; background-color:#adacac">${sectionName}</td></tr>`;
    var no = 1;
    items.forEach((item, index) => {
        html += `<tr>
                    <td class='tg-b_body' style='border-left:1px solid black'>${no}</td>
                    <td class='tg-b_body'>${item.itemText}</td>`;
        
        if (customForm == 143) {
            html += `<td class='tg-b_body' style='align:center'>${item.complexityLevel}</td>`;
            html += `<td class='tg-b_body' align="right">Rp. ${numberWithCommas(item.itemPrice)}</td>
                    <td class='tg-b_body' style='align:center'>${item.quantity}</td>`;
        } else {
            html += `<td class='tg-b_body' align="right">Rp. ${numberWithCommas(item.itemPrice)}</td>
                    <td class='tg-b_body' style='align:center'>${item.quantity}</td>`;
        }
        
        if (index === 0) {
            html += `<td class='tg-b_body' style="border-right: 1px solid black; align:right;" rowspan="${items.length}">Rp. ${removeDecimalFormat(item.totalCost)}</td>`;
        } else {
            html += `<td class='tg-b_body' style="border-right: 1px solid black; align:right;" rowspan="${items.length}"></td>`;
        }

        html += `</tr>
                <tr>
                        <td class='tg-b_body' style='border-left: 1px solid black'></td>
                        <td class='tg-b_body'>${item.description}</td>`;
        
        if (customForm == 143) {
            log.debug('masuk sini')
            html += `<td class='tg-b_body' style='border-right: 1px solid black' colspan="4"></td>`;
        }else{
            log.debug('masuk else')
            html += `<td class='tg-b_body' style='border-right: 1px solid black' colspan="3"></td>`;
        }

        html += `</tr>
                <tr>
                    <td class='tg-b_body' style='border-left: 1px solid black'></td>
                    <td class='tg-b_body' style='font-weight:bold;'>${item.remarks}</td>`;
        
        if (customForm == 143) {
            html += `<td class='tg-b_body' style='border-right: 1px solid black' colspan="4"></td>`;
        } else {
            html += `<td class='tg-b_body' style='border-right: 1px solid black' colspan="3"></td>`;
        }

        html += `</tr>`;

        if (item.discLine && item.discLine != 0) {
            html += `<tr>
                        <td class='tg-b_body' style='border-left: 1px solid black'></td>
                        <td class='tg-b_body' style=''>[Discount - ${item.prosDiscLine}%]</td>`;
            
            if (customForm == 143) {
                html += `<td class='tg-b_body' colspan="3"></td>`;
            } else {
                html += `<td class='tg-b_body' colspan="2"></td>`;
            }

            html += `<td class='tg-b_body' style='border-right: 1px solid black; align:right;'>Rp. (${numberWithCommas(item.discLine)})</td>
                    </tr>`;
        }

        no++;
    });
    return html;
}





    var dataSection = [];
    var dataItem = [];

    function getPOItem(context, dataRec, customForm) {
    var itemCount = dataRec.getLineCount({
        sublistId: "item",
    });
    if (itemCount > 0) {
        var body = "";
        for (var index = 0; index < itemCount; index++) {
        var account = dataRec.getSublistValue({
            sublistId: "item",
            fieldId: "item",
            line: index,
        });
        var itemId = dataRec.getSublistValue({
            sublistId: "item",
            fieldId: "item",
            line: index,
        });
        
        if(itemId != '2880'){
            log.debug('itemId', itemId)
            if (account) {
            var itemText = dataRec.getSublistText({
                sublistId: "item",
                fieldId: "item",
                line: index,
            });
            var description = dataRec.getSublistValue({
                sublistId: "item",
                fieldId: "description",
                line: index,
            });
            var remarks = dataRec.getSublistValue({
                sublistId: "item",
                fieldId: "custcol_abj_rate_card_line_item_rmrks",
                line: index,
            });
            var complexityLevel = dataRec.getSublistText({
                sublistId: "item",
                fieldId: "custcol_abj_complexity_level_line",
                line: index,
            });
            var itemPrice = dataRec.getSublistValue({
                sublistId: "item",
                fieldId: "rate",
                line: index,
            });
            var quantity = dataRec.getSublistValue({
                sublistId: "item",
                fieldId: "quantity",
                line: index,
            });
            var totalCost = dataRec.getSublistText({
                sublistId: "item",
                fieldId: "amount",
                line: index,
            });
            var sectionID = dataRec.getSublistValue({
                sublistId: "item",
                fieldId: "custcol_abj_rate_card_section_list",
                line: index,
            });
            var sectionName = dataRec.getSublistText({
                sublistId: "item",
                fieldId: "custcol_abj_rate_card_section_list",
                line: index,
            });
            var discLine = dataRec.getSublistValue({
                sublistId: "item",
                fieldId: "custcol_abj_disc_line",
                line: index,
            }) || 0
            var prosDiscLine =  Number(discLine)/ Number(itemPrice) *100
            log.debug('itemPrice', itemPrice);
            log.debug('discLine', discLine);
            log.debug("prosDiscLine", prosDiscLine);
            dataSection.push(sectionName);
            dataItem.push({
                itemText: escapeXmlSymbols(itemText),
                description: escapeXmlSymbols(description),
                remarks: escapeXmlSymbols(remarks),
                sectionID: sectionID,
                complexityLevel: complexityLevel,
                itemPrice: itemPrice,
                quantity: quantity,
                totalCost: totalCost,
                discLine : discLine,
                prosDiscLine : prosDiscLine
            });
            }
        }
        
        }
        dataSection = removeDuplicates(dataSection);
        log.debug("dataSection", dataSection);
        log.debug('dataItem', dataItem)
        const groupedItems = {};
        dataItem.forEach((item) => {
        if (!groupedItems[item.sectionID]) {
            groupedItems[item.sectionID] = [];
        }
        groupedItems[item.sectionID].push(item);
        });
        let tableHTML = "";
        for (const sectionID in groupedItems) {
        tableHTML += generateTableHTML(sectionID, groupedItems[sectionID], customForm);
        }
        body += tableHTML;
        return body;
    }
    }
    return {
    onRequest: onRequest,
    };
});
