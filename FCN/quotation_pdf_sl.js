/**
 * @NApiVersion 2.1
 * @NScriptType Suitelet
 */
// This sample shows how to render search results into a PDF file.
define(["N/render", "N/search", "N/record", "N/log", "N/file", "N/http", "N/config", "N/format", "N/email", "N/runtime"], function (render, search, record, log, file, http, config, format, email, runtime) {
  function removeDecimalFormat(number) {
    return number.toString().substring(0, number.toString().length - 3);
  }
  function pembulatan(angka) {
    if (angka >= 0) {
      var bulat = Math.floor(angka);
      var desimal = angka - bulat;

      if (desimal >= 0.5) {
        return Math.ceil(angka);
      } else {
        return Math.floor(angka);
      }
    } else {
      return Math.ceil(angka);
    }
  }

  function removeDuplicates(array) {
    return array.filter((value, index, self) => {
      return self.indexOf(value) === index;
    });
  }

  function numberWithCommas(x) {
    x = x.toString();
    var pattern = /(-?\d+)(\d{3})/;
    while (pattern.test(x)) x = x.replace(pattern, "$1,$2");
    return x;
  }

  function onRequest(context) {
    var recid = context.request.parameters.id;
    // load PO
    var dataRec = record.load({
      type: "estimate",
      id: recid,
      isDynamic: false,
    });

    var currenc = dataRec.getValue("currency");
    if (currenc) {
      var recCurrenc = record.load({
        type: "currency",
        id: currenc,
        isDynamic: false,
      });
      var tlcCurr = recCurrenc.getValue("symbol");
    }
    var subsidiari = dataRec.getValue("subsidiary");
    var discountTotal = dataRec.getValue("discounttotal");
    var employeeName = dataRec.getText("custbody_fcn_sales_employee");
    // load subsidiarie
    if (subsidiari) {
      var subsidiariRec = record.load({
        type: "subsidiary",
        id: subsidiari,
        isDynamic: false,
      });
      // load for header
      var legalName = subsidiariRec.getValue("legalname");
      var addresSubsidiaries = subsidiariRec.getValue("mainaddress_text");
      var retEmailAddres = subsidiariRec.getValue("email");
      var Npwp = subsidiariRec.getValue("federalidnumber");
      var logo = subsidiariRec.getValue("logo");
      var filelogo;
      var urlLogo = "";
      if (logo) {
        filelogo = file.load({
          id: logo,
        });
        //get url
        urlLogo = filelogo.url.replace(/&/g, "&amp;");
      }

      if (addresSubsidiaries.includes("<br>")) {
        addresSubsidiaries = addresSubsidiaries.replace(/<br>/g, "");
      }
    }

    // load vendor
    var customerID = dataRec.getValue("entity");
    if (customerID) {
      var custRecord = record.load({
        type: record.Type.CUSTOMER,
        id: customerID,
        isDynamic: false,
      });
      var custName;
      var isperson = custRecord.getValue("isperson");
      if (isperson == "T") {
        var firstname = custRecord.getValue("firstname") || "";
        var middleName = custRecord.getValue("middlename") || "";
        var lastname = custRecord.getValue("lastname") || "";
        custName = firstname + " " + middleName + " " + lastname;
      } else {
        var isChecklist = custRecord.getValue("isautogeneratedrepresentingentity");
        if (isChecklist === true) {
          custName = custRecord.getValue("comments");
        } else {
          custName = custRecord.getValue("companyname");
        }
      }
      var custAddres = custRecord.getValue("billaddr1");
      if (custAddres === "") {
        custAddres = custRecord.getValue("defaultaddress");
      }

      var taxRegNo = custRecord.getValue("vatregnumber");
      var custEmail = custRecord.getValue("email");
      var custPhone = custRecord.getValue("phone");
      var count = custRecord.getLineCount({
        sublistId: "submachine",
      });
      for (var i = 0; i < count; i++) {
        var subsidiary = custRecord.getSublistValue({
          sublistId: "submachine",
          fieldId: "subsidiary",
          line: i,
        });

        if (subsidiary == subsidiari) {
          var balance = custRecord.getSublistValue({
            sublistId: "submachine",
            fieldId: "balance",
            line: i,
          });
          break;
        }
      }
    }
    if (balance) {
      balance = format.format({
        value: balance,
        type: format.Type.CURRENCY,
      });
    }
    // PO data
    var jobTitle = dataRec.getValue("title");
    var sendDate = dataRec.getText("trandate");
    var quoteTotal = dataRec.getValue("total") || 0;
    var taxtotal = dataRec.getValue("taxtotal") || 0;
    var total = dataRec.getValue("total") || 0;
    var jobNumber = dataRec.getValue("custbody_abj_custom_jobnumber");
    if (jobNumber.includes("\\")) {
      jobNumber = jobNumber.replace(/\\/g, "<br/>");
    }
    var subTotal = 0;
    var totalToCount = total;
    var totalWhTaxamount = 0;
    var totalWhTaxamountItem = 0;
    var totalWhTaxamountExp = 0;
    var whtaxammountItem = 0;
    var whtaxammountExp = 0;
    var whTaxCodetoPrint = "";
    // log.debug('countSubtotal', {total:total, taxtotal:taxtotal});
    var countItem = dataRec.getLineCount({
      sublistId: "item",
    });
    var taxrateList = [];
    if (countItem > 0) {
      for (var i = 0; i < countItem; i++) {
        var account = dataRec.getSublistValue({
          sublistId: "item",
          fieldId: "item",
          line: i,
        });
        if (account) {
          whtaxammountItem = dataRec.getSublistValue({
            sublistId: "item",
            fieldId: "custcol_4601_witaxamount",
            line: i,
          });
          var amount = dataRec.getSublistValue({
            sublistId: "item",
            fieldId: "amount",
            line: i,
          });
          var qty = dataRec.getSublistValue({
            sublistId: "item",
            fieldId: "quantity",
            line: i,
          });
          var taxRate = dataRec.getSublistValue({
            sublistId: "item",
            fieldId: "taxrate1",
            line: i,
          });
          if (taxRate != 0 && taxrateList.indexOf(taxRate) === -1) {
            taxrateList.push(parseFloat(taxRate));
          }
          log.debug("taxRate", taxRate);
          var whTaxCodeI = dataRec.getSublistValue({
            sublistId: "item",
            fieldId: "custcol_4601_witaxcode",
            line: i,
          });

          if (whTaxCodeI) {
            var whRecI = record.load({
              type: "customrecord_4601_witaxcode",
              id: whTaxCodeI,
              isDynamic: false,
            });
            whTaxCodetoPrint = whRecI.getValue("custrecord_4601_wtc_name");
            if (whTaxCodetoPrint.includes("Prepaid Tax") || whTaxCodetoPrint.includes("Tax Article")) {
              whTaxCodetoPrint = whTaxCodetoPrint.replace("Prepaid Tax", "PPH").replace("Tax Article", "PPH");
            }
          }
          // var totalAmount = Number(amount) * Number(qty)
          var totalAmount = amount;
          log.debug("subtotalcount", { "total amount": totalAmount, amount: amount, qty: qty });
          subTotal += totalAmount;
          log.debug("subtotal check", subTotal);
          var tamount = whtaxammountItem;
          whtaxammountItem = Math.abs(tamount);
          totalWhTaxamountItem += whtaxammountItem;
        }
      }
    }

    var whtaxToCount = whtaxammountItem + whtaxammountExp;
    totalWhTaxamount = totalWhTaxamountItem + totalWhTaxamountExp;
    var totalWHTaxToCount = totalWhTaxamount;

    total = Number(subTotal) + Number(taxtotal);
    var totalReceived = total;
    var subTotal2 = Number(subTotal) + Number(discountTotal);
    log.debug("subTotal2", subTotal2);

    if (totalWhTaxamount) {
      totalWhTaxamount = pembulatan(totalWhTaxamount);
      totalWhTaxamount = format.format({
        value: totalWhTaxamount,
        type: format.Type.CURRENCY,
      });
    }
    if (quoteTotal) {
      quoteTotal = format.format({
        value: quoteTotal,
        type: format.Type.CURRENCY,
      });
    }
    if (subTotal) {
      subTotal = pembulatan(subTotal);
      subTotal = format.format({
        value: subTotal,
        type: format.Type.CURRENCY,
      });
    }

    if (subTotal2) {
      subTotal2 = pembulatan(subTotal2);
      subTotal2 = format.format({
        value: subTotal2,
        type: format.Type.CURRENCY,
      });
    }

    if (taxtotal) {
      taxtotal = pembulatan(taxtotal);
      taxtotal = format.format({
        value: taxtotal,
        type: format.Type.CURRENCY,
      });
    }
    if (total) {
      total = pembulatan(total);
      total = format.format({
        value: total,
        type: format.Type.CURRENCY,
      });
    }
    if (sendDate) {
      sendDate = format.format({
        value: sendDate,
        type: format.Type.DATE,
      });
    }

    var amountRecieved = Number(totalReceived) - Number(totalWHTaxToCount);
    amountRecieved = pembulatan(amountRecieved);
    if (amountRecieved) {
      amountRecieved = format.format({
        value: amountRecieved,
        type: format.Type.CURRENCY,
      });
    }
    var response = context.response;
    var xml = "";
    var header = "";
    var body = "";
    var headerHeight = "1%";
    var style = "";
    var footer = "";
    var pdfFile = null;
    var terms = "";
    var duedate = "";

    style += "<style type='text/css'>";
    style += ".tg {border-collapse:collapse; border-spacing: 0; width: 100%;}";
    style += ".tg .tg-headerlogo{align:right; border-right: none;border-left: none;border-top: none;border-bottom: none;}";
    if (subsidiari == 1) {
      style += ".tg .tg-img-logo{width:150px; height:111px; object-vit:cover;}";
    } else {
      style += ".tg .tg-img-logo{width:195px; height:90px; object-vit:cover;}";
    }
    style += ".tg .tg-headerrow{align: right;font-size:10px;}";
    style += ".tg .tg-headerrow_legalName{align: right;font-size:10px;word-break:break-all; font-weight: bold;}";
    style += ".tg .tg-headerrow_legalNameLeft{align: left;font-size:10px;word-break:break-all; font-weight: bold;}";
    style += ".tg .tg-headerrow_quote{align: center;font-size:16px; font-weight: bold;}";
    style += ".tg .tg-headerrow_Total{align: right;font-size:16px;word-break:break-all; font-weight: bold;}";
    style += ".tg .tg-headerrow_left{align: left;font-size:10px;}";
    style += ".tg .tg-headerrow_center{align: center;font-size:10px;}";
    style += ".tg .tg-head_body{align: left;font-size:10px;font-weight: bold; border-top: 1px solid black; border-bottom: 1px solid black;}";
    style += ".tg .tg-b_body{align: left;font-size:10px; border-bottom: solid black 1px; border-left: solid black 1px;}";
    style += ".tg .tg-f_body{align: right;font-size:10px;}";
    style += ".tg .tg-foot{font-size:11px; color: #808080; position: absolute; bottom: 0;}";
    style += "</style>";

    header += '<table class=\'tg\' width="100%"  style="table-layout:fixed;">';
    header += "<tbody>";
    header += "</tbody>";
    header += "</table>";
    body += '<table class=\'tg\' width="100%"  style="table-layout:fixed;">';
    body += "<tbody>";
    body += "<tr>";
    if (urlLogo) {
      body += "<td class='tg-headerlogo' style='width:50%;vertical-align:center; align:left;'><div style='display: flex; height:150px; width:150px;'><img class='tg-img-logo' src= '" + urlLogo + "' ></img></div></td>";
    }
    body += "<td width='30%' valign='middle' style='border-top: 1px solid black;border-left: 1px solid black;border-bottom: 1px solid black;'>";
    body += "<p class='tg-headerrow_legalNameLeft' style='margin-top: 10px; margin-bottom: 10px;'>" + legalName + "</p>";
    body += "<p class='tg-headerrow_left' style='margin-top: 1px; margin-bottom: 1px;'>" + addresSubsidiaries + "</p>";
    body += "</td>";
    body += "<td valign='middle' style='border-top: 1px solid black;border-left: 1px solid black;border-right: 1px solid black;border-bottom: 1px solid black;'>";
    body += "<p class='tg-headerrow_quote' style='margin-top: 10px; margin-bottom: 10px;'><b>QUOTATION</b></p>";
    body += "</td>";
    body += "</tr>";

    body += "<tr style='height:30px;'>";
    body += "</tr>";
    body += "</tbody>";
    body += "</table>";

    body += `
          <table class="tg" width="100%"  style="table-layout:fixed;">
            <tbody>
              <tr>
                <td rowspan="2" class="tg-headerrow_left" style='border-top: 1px solid black;border-left: 1px solid black;border-right: 1px solid black;border-bottom: 1px solid black;' width="40%"><b>Order By : ${custName}</b></td>
                <td rowspan="2" width="40%"></td>
                <td class="tg-headerrow_center" style='border-top: 1px solid black;border-left: 1px solid black;border-right: 1px solid black;border-bottom: 1px solid black;' width="20%"><b>Send Date</b></td>
              </tr>
              <tr>
                <td class="tg-headerrow_center" style='border-left: 1px solid black;border-right: 1px solid black;border-bottom: 1px solid black;' width="20%">${sendDate}</td>
              </tr>
              <tr style='height:20px;'></tr>
            </tbody>
          </table>
    `;

    body += `
          <table class="tg" width="100%"  style="table-layout:fixed;">
            <tbody>
              <tr>
                <td class="tg-headerrow_left" style='border-top: 1px solid black;border-left: 1px solid black;border-right: 1px solid black;border-bottom: 1px solid black;' width="30%"><b>Contact Person :</b></td>
                <td rowspan="2" width="30%"></td>
                <td class="tg-headerrow_center" style='border-top: 1px solid black;border-left: 1px solid black;border-right: 1px solid black;border-bottom: 1px solid black;' width="20%"><b>Job Title</b></td>
                <td class="tg-headerrow_center" style='border-top: 1px solid black;border-right: 1px solid black;border-bottom: 1px solid black;' width="20%"><b>Job No.</b></td>
              </tr>
              <tr>
                <td class="tg-headerrow_left" style='border-left: 1px solid black;border-right: 1px solid black;border-bottom: 1px solid black;'><b>Email :</b> ${custEmail} <br/><br/> <b>Phone :</b> ${custPhone}</td>
                <td class="tg-headerrow_center" style='border-left: 1px solid black;border-right: 1px solid black;border-bottom: 1px solid black;' width="20%">${jobTitle}</td>
                <td class="tg-headerrow_center" style='border-right: 1px solid black;border-bottom: 1px solid black;' width="20%">${jobNumber}</td>
              </tr>
              <tr style='height:30px;'></tr>
            </tbody>
          </table>
    `;

    body += '<table class=\'tg\' width="100%" style="table-layout:fixed;">';
    body += "<tbody>";
    body += "<tr>";
    body += "<td class='tg-head_body' style='border-left: 1px solid black;' width='5%'> No </td>";
    body += "<td class='tg-head_body' style='border-left: 1px solid black;' width='15%'> Item </td>";
    body += "<td class='tg-head_body' style='border-left: 1px solid black;' width='25%'> Description </td>";
    body += "<td class='tg-head_body' style='border-left: 1px solid black;' width='13%'> Remarks </td>";
    body += "<td class='tg-head_body' style='border-left: 1px solid black;' width='15%'> Complexity Level </td>";
    body += "<td class='tg-head_body' style='border-left: 1px solid black;' width='10%'> Item Price </td>";
    body += "<td class='tg-head_body' style='border-left: 1px solid black;' width='5%'> QTY </td>";
    body += "<td class='tg-head_body' style='border-left: 1px solid black;' width='11%'> Total Costs </td>";
    body += "<td class='tg-head_body' style='border-right: 1px solid black; border-left: 1px solid black;'  width='11%'> Line Total </td>";
    body += "</tr>";
    body += getPOItem(context, dataRec);
    body += "<tr style='height:20px;'></tr>";
    body += "</tbody>";
    body += "</table>";

    body += `
          <table class="tg" width="100%">
            <tbody>
              <tr>
                <td colspan="6" class="tg-headerrow_left" style='border-top: 1px solid black;border-left: 1px solid black;border-right: 1px solid black;border-bottom: 1px solid black;'><b>Terms & Conditions :</b></td>
                <td></td>
                <td class='tg-f_body' style='border-top: 1px solid black;border-left: 1px solid black;border-right: 1px solid black;border-bottom: 1px solid black;'>Subtotal 1	</td>
                <td class='tg-f_body' style='border-top: 1px solid black;border-right: 1px solid black;border-bottom: 1px solid black;'>${removeDecimalFormat(subTotal)}</td>
              </tr>
              <tr>
                <td colspan="6" class="tg-headerrow_left" style='border-left: 1px solid black;border-right: 1px solid black;'>
                - All price above is estimation and adjustable which can be changed based on third party or KOL ratecard
                </td>
                <td></td>
                <td class='tg-f_body' style='border-left: 1px solid black;border-right: 1px solid black;border-bottom: 1px solid black;'>Discount (Optional)	</td>
                <td class='tg-f_body' style='border-right: 1px solid black;border-bottom: 1px solid black;'>${removeDecimalFormat(discountTotal)}</td>
              </tr>
              <tr>
                <td colspan="6" class="tg-headerrow_left" style='border-left: 1px solid black;border-right: 1px solid black;'>
                - Grand Total includes VAT (11%)
                </td>
                <td></td>
                <td class='tg-f_body' style='border-left: 1px solid black;border-right: 1px solid black;border-bottom: 1px solid black;'>Subtotal 2	</td>
                <td class='tg-f_body' style='border-right: 1px solid black;border-bottom: 1px solid black;'>${removeDecimalFormat(subTotal2)}</td>
              </tr>
              <tr>
                <td colspan="6" class="tg-headerrow_left" style='border-left: 1px solid black;border-right: 1px solid black;'>
                - Deliverables or request out of the SOW will be invoiced according to the agreed ratecard
                </td>
                <td></td>
                <td class='tg-f_body' style='border-left: 1px solid black;border-right: 1px solid black;border-bottom: 1px solid black;'>VAT ${taxrateList}%	</td>
                <td class='tg-f_body' style='border-right: 1px solid black;border-bottom: 1px solid black;'>${removeDecimalFormat(taxtotal)}</td>
              </tr>
              <tr>
                <td colspan="6" class="tg-headerrow_left" style='border-left: 1px solid black;border-right: 1px solid black;'>
                - All rates excludes travel expense & per diem
                </td>
                <td></td>
                <td class='tg-f_body' style='border-left: 1px solid black;border-right: 1px solid black;border-bottom: 1px solid black;'>GRAND TOTAL	</td>
                <td class='tg-f_body' style='border-right: 1px solid black;border-bottom: 1px solid black;'>${removeDecimalFormat(total)}</td>
              </tr>
              <tr>
                <td colspan="6" class="tg-headerrow_left" style='border-left: 1px solid black;border-right: 1px solid black;'>
                - All costs must have prior client approval before execution of work
                </td>
                <td></td>
                <td></td>
                <td></td>
              </tr>
              <tr>
                <td colspan="6" class="tg-headerrow_left" style='border-left: 1px solid black;border-right: 1px solid black;border-bottom: 1px solid black;'>
                - Any price changes from 3rd party will be quoted to client seperately
                </td>
                <td></td>
                <td></td>
                <td></td>
              </tr>
              <tr style='height:30px;'></tr>
            </tbody>
          </table>
    `;

    body += `
          <table class="tg" width="100%" style="table-layout:fixed;">
            <tr>
              <td></td>
              <td class="tg-headerrow_left" width="30%"><b>Proposed by,</b></td>
              <td colspan="2"></td>
              <td></td>
              <td class="tg-headerrow_left" width="30%"><b>Approved by,</b></td>
            </tr>
            <tr style='height:70px;'>
              <td></td>
              <td class="tg-headerrow_left" style='border-bottom: 1px solid black; border-top: 1px solid black; border-left: 1px solid black;border-right: 1px solid black;'></td>
              <td colspan="2"></td>
              <td></td>
              <td class="tg-headerrow_left" style='border-bottom: 1px solid black; border-top: 1px solid black; border-left: 1px solid black;border-right: 1px solid black;'></td>
            </tr>
            <tr style='height:15px;'></tr>
            <tr>
              <td class="tg-headerrow_left">Name :</td>
              <td class="tg-headerrow_left" width="30%" style='border-bottom: 1px solid black; border-top: 1px solid black; border-left: 1px solid black;border-right: 1px solid black;'>${employeeName}</td>
              <td colspan="2"></td>
              <td class="tg-headerrow_left">Name :</td>
              <td class="tg-headerrow_left" width="30%" style='border-bottom: 1px solid black; border-top: 1px solid black; border-left: 1px solid black;border-right: 1px solid black;'></td>
            </tr>
            <tr>
              <td class="tg-headerrow_left">Date :</td>
              <td class="tg-headerrow_left" width="30%" style='border-bottom: 1px solid black; border-left: 1px solid black;border-right: 1px solid black;'>${sendDate}</td>
              <td colspan="2"></td>
              <td class="tg-headerrow_left">Date :</td>
              <td class="tg-headerrow_left" width="30%" style='border-bottom: 1px solid black; border-left: 1px solid black;border-right: 1px solid black;'></td>
            </tr>
          </table>
    `;

    footer += "<table class='tg' style='table-layout: fixed;'>";
    footer += "<tbody>";
    footer += "<tr class='tg-foot'>";
    footer += "<td style='align:left'>Quotation # " + jobNumber + "</td>";
    footer += "<td style='align:right'></td>";
    footer += "</tr>";
    footer += "</tbody>";
    footer += "</table>";

    var xml = '<?xml version="1.0"?>\n<!DOCTYPE pdf PUBLIC "-//big.faceless.org//report" "report-1.1.dtd">';
    xml += "<pdf>";
    xml += "<head>";
    xml += style;
    xml += "<macrolist>";
    xml += '<macro id="nlheader">';
    xml += header;
    xml += "</macro>";
    xml += '<macro id="nlfooter">';
    xml += footer;
    xml += "</macro>";
    xml += "</macrolist>";
    xml += "</head>";
    xml += "<body font-size='10' style='font-family: Tahoma,sans-serif;height: 29.7cm; width: 21cm;' header='nlheader' header-height='" + headerHeight + "' footer='nlfooter' footer-height='3%'>";
    xml += body;
    xml += "\n</body>\n</pdf>";

    xml = xml.replace(/ & /g, " &amp; ");
    response.renderPdf({
      xmlString: xml,
    });
  }

  function generateTableHTML(sectionID, items) {
    var fieldLookUpSection = search.lookupFields({
      type: "customlist_abj_rate_card_section",
      id: sectionID,
      columns: ["name"],
    });
    var sectionName = fieldLookUpSection.name;
    let html = `<tr><td colspan="9" class='tg-b_body' style="border-right: 1px solid black;">${sectionName}</td></tr>`;
    var no = 1;
    items.forEach((item, index) => {
      html += `<tr>
                    <td class='tg-b_body'></td>
                    <td class='tg-b_body'>${item.itemText}</td>
                    <td class='tg-b_body' align="left">${item.description}</td>
                    <td class='tg-b_body'>${item.remarks}</td>
                    <td class='tg-b_body'>${item.complexityLevel}</td>
                    <td class='tg-b_body' align="right">${numberWithCommas(item.itemPrice)}</td>
                    <td class='tg-b_body'>${item.quantity}</td>
                    <td class='tg-b_body' align="right">${removeDecimalFormat(item.totalCost)}</td>
                    ${index === 0 ? `<td valign='middle' class='tg-b_body' style="border-right: 1px solid black;" rowspan="${items.length}">${items.reduce((total, item) => total + parseFloat(item.totalCost.replace(/,/g, "")), 0).toLocaleString("en-US", { minimumFractionDigits: 0, maximumFractionDigits: 0 })}</td>` : ""}
                </tr>`;
    });
    return html;
  }

  var dataSection = [];
  var dataItem = [];

  function getPOItem(context, dataRec) {
    var itemCount = dataRec.getLineCount({
      sublistId: "item",
    });
    if (itemCount > 0) {
      var body = "";
      for (var index = 0; index < itemCount; index++) {
        var account = dataRec.getSublistValue({
          sublistId: "item",
          fieldId: "item",
          line: index,
        });
        var itemId = dataRec.getSublistValue({
          sublistId: "item",
          fieldId: "item",
          line: index,
        });
        if(itemId != '2880'){
          if (account) {
            var itemText = dataRec.getSublistText({
              sublistId: "item",
              fieldId: "item",
              line: index,
            });
            var description = dataRec.getSublistValue({
              sublistId: "item",
              fieldId: "description",
              line: index,
            });
            var remarks = dataRec.getSublistValue({
              sublistId: "item",
              fieldId: "custcol_abj_rate_card_line_item_rmrks",
              line: index,
            });
            var complexityLevel = dataRec.getSublistText({
              sublistId: "item",
              fieldId: "custcol_abj_complexity_level_line",
              line: index,
            });
            var itemPrice = dataRec.getSublistValue({
              sublistId: "item",
              fieldId: "rate",
              line: index,
            });
            var quantity = dataRec.getSublistValue({
              sublistId: "item",
              fieldId: "quantity",
              line: index,
            });
            var totalCost = dataRec.getSublistText({
              sublistId: "item",
              fieldId: "amount",
              line: index,
            });
            var sectionID = dataRec.getSublistValue({
              sublistId: "item",
              fieldId: "custcol_abj_rate_card_section_list",
              line: index,
            });
            var sectionName = dataRec.getSublistText({
              sublistId: "item",
              fieldId: "custcol_abj_rate_card_section_list",
              line: index,
            });
            dataSection.push(sectionName);
            dataItem.push({
              itemText: itemText,
              description: description,
              remarks: remarks,
              sectionID: sectionID,
              complexityLevel: complexityLevel,
              itemPrice: itemPrice,
              quantity: quantity,
              totalCost: totalCost,
            });
          }
        }
        
      }
      dataSection = removeDuplicates(dataSection);
      log.debug("dataSection", dataSection);
      const groupedItems = {};
      dataItem.forEach((item) => {
        if (!groupedItems[item.sectionID]) {
          groupedItems[item.sectionID] = [];
        }
        groupedItems[item.sectionID].push(item);
      });
      let tableHTML = "";
      for (const sectionID in groupedItems) {
        tableHTML += generateTableHTML(sectionID, groupedItems[sectionID]);
      }
      body += tableHTML;
      return body;
    }
  }
  return {
    onRequest: onRequest,
  };
});
