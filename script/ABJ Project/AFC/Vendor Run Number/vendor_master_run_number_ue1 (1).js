/**
 * @NApiVersion 2.1
 * @NScriptType UserEventScript
 * @NModuleScope SameAccount
 */

define(["N/record", "N/search"], function(
  record,
  search,
) {
  function afterSubmit(context) {
    try {
      var isEdit = context.type == context.UserEventType.EDIT;
      var isInsert = context.type == context.UserEventType.CREATE;
      var rec = context.newRecord;
      var recold = context.oldRecord;

      let vendorRec = record.load({
        type: rec.type,
        id: rec.id,
      });

      let vdrEntityID = vendorRec.getValue('entityid');
      let vdrEntityIDText = vendorRec.getText('entityid') || '';
      let vdrOwner = vendorRec.getText('custentity_vdr_owner');
      let vdrGroup = vendorRec.getValue('custentity_abj_vdr_grp');
      let isperson = vendorRec.getValue('isperson');
      let vdrOwnerSplit = vdrOwner.split("-");
      let vdrText = vdrOwnerSplit[0].trim();
      log.debug("vdrText", vdrText);
      if (isEdit) {
        var vdrEntityIdOld = recold.getValue('entityid') || '';
        var vdrEntityIdOldText = recold.getText('entityid') || '';
        var oldvdrOwner = recold.getText('custentity_vdr_owner');
        var oldvdrGroup = recold.getValue('custentity_abj_vdr_grp');
        var oldisperson = recold.getValue('isperson');
        var vdrOwnerSplitOld = oldvdrOwner.split("-");
        var vdrTextOld = vdrOwnerSplitOld[0].trim();
        log.debug("vdrTextOld", vdrTextOld);
        log.debug("vdrEntityIdOldText", vdrEntityIdOldText);
        log.debug("oldvdrOwner", oldvdrOwner);
        log.debug("vdrEntityIdOld", vdrEntityIdOld);
      }

      if (isInsert || (isEdit && ((oldvdrGroup !== vdrGroup) || (vdrTextOld != vdrText) || (!vdrEntityIdOldText.includes("-")) || (oldisperson !== isperson)))) {
        let vdrCompName;
        if (isperson == 'T') {
          vdrCompName = vendorRec.getValue('firstname') + ' ' + vendorRec.getValue('middlename') + ' ' + vendorRec.getValue('lastname');
        } else {
          vdrCompName = vendorRec.getValue('companyname');
        }
        log.debug("vdrCompName", vdrCompName);
        log.debug("vdrGroup", vdrGroup);
        log.debug("vdrOwner", vdrOwner);
        if (vdrGroup == 1) {
          var vendorRunningNumbers = search.create({
            type: 'customrecord_vendor_autogenerated_number',
            columns: ['internalid', 'name', 'custrecord_van_increment', 'custrecord_van_transaction_prefix', 'custrecord_van_vendor_owner', 'custrecord_van_digit_length'],
            filters: [{
              name: 'name',
              operator: 'contains',
              values: vdrText
            }, ]
          });

          log.debug("After Create search", "after create search");

          var vendorRunningNumbersSet = vendorRunningNumbers.run();
          vendorRunningNumbers = vendorRunningNumbersSet.getRange({
            start: 0,
            end: 1
          });

          log.debug("vendorRunningNumbers", vendorRunningNumbers);

          vendorRunningNumbers.forEach(function(vendorRunningNumber) {
            var runNumberId = vendorRunningNumber.getValue({
              name: 'internalid'
            });
            var vendorOwn = vendorRunningNumber.getValue({
              name: 'custrecord_van_vendor_owner'
            });
            var prefixNumber = vendorRunningNumber.getValue({
              name: 'custrecord_van_transaction_prefix'
            });
            log.debug("prefixNumber", prefixNumber);

            var vdrEntityIDSplit = vdrEntityIDText.split("-");
            var vID = vdrEntityIDSplit[0];
            log.debug("vID", vID);
            /*if (isEdit) {
              if (vdrTextOld != vdrText || (!vdrEntityIdOldText.includes("-"))) {
                var lastNumber = parseInt(vendorRunningNumber.getValue({
                  name: 'custrecord_van_increment'
                }) || 0) + 1;
              } else {
				//return false;
                var lastNumber = parseInt(vendorRunningNumber.getValue({
                  name: 'custrecord_van_increment'
                }) || 0);
              }
            } else {*/
            var lastNumber = parseInt(vendorRunningNumber.getValue({
              name: 'custrecord_van_increment'
            }) || 0) + 1;

            var numberDigit = parseInt(vendorRunningNumber.getValue({
              name: 'custrecord_van_digit_length'
            }));

            var digitPart = '0';
            digitPart = digitPart.repeat(numberDigit) + lastNumber.toString();

            function rightStr(str, chr) {
              return str.slice(str.length - chr, str.length);
            }
            log.debug("DigitPart0", digitPart);
            digitPart = rightStr(digitPart, numberDigit);
            var vendorNumber = prefixNumber + digitPart + " - " + vdrCompName;
            log.debug("vendorNumber", vendorNumber);

            vendorRec.setValue({
              fieldId: 'entityid',
              value: vendorNumber,
              ignoreFieldChange: true
            });

            vendorRec.save({
              enableSourcing: false,
              ignoreMandatoryFields: true
            });

            var runNumber_Toupdate = record.load({
              type: 'customrecord_vendor_autogenerated_number',
              id: runNumberId,
              isDynamic: true
            });

            runNumber_Toupdate.setValue({
              fieldId: 'custrecord_van_increment',
              value: lastNumber,
              ignoreFieldChange: false
            });

            runNumber_Toupdate.save({
              enableSourcing: false,
              ignoreMandatoryFields: true
            });
          });
        }
      }
    } catch (e) {
      err_messages = 'error in after submit ' + e.name + ': ' + e.message;
      log.debug(err_messages);
    }
  }

  return {
    afterSubmit: afterSubmit,
  };
});